$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module sys_arr_pkg $end
  $var wire 32 ~ N [31:0] $end
  $var wire 32 !! DW [31:0] $end
  $var wire 32 { MUL_LEN [31:0] $end
  $var wire 32 "! ADD_LEN [31:0] $end
 $upscope $end
 $scope module MAC_unit_tb $end
  $var wire 32 { CLK_PERIOD [31:0] $end
  $var wire 1 u tb_clk $end
  $var wire 1 # tb_nrst $end
  $scope module mac_if $end
   $var wire 1 , start $end
   $var wire 3 #! count [2:0] $end
   $var wire 16 ) weight [15:0] $end
   $var wire 16 - in_value [15:0] $end
   $var wire 1 . MAC_shift $end
   $var wire 16 8 in_pass [15:0] $end
   $var wire 16 & in_accumulate [15:0] $end
   $var wire 16 t out_accumulate [15:0] $end
   $var wire 1 7 value_ready $end
  $upscope $end
  $scope module dut $end
   $var wire 1 u clk $end
   $var wire 1 # nRST $end
   $scope module mac_if $end
    $var wire 1 , start $end
    $var wire 3 #! count [2:0] $end
    $var wire 16 ) weight [15:0] $end
    $var wire 16 - in_value [15:0] $end
    $var wire 1 . MAC_shift $end
    $var wire 16 8 in_pass [15:0] $end
    $var wire 16 & in_accumulate [15:0] $end
    $var wire 16 t out_accumulate [15:0] $end
    $var wire 1 7 value_ready $end
   $upscope $end
   $var wire 16 8 input_x [15:0] $end
   $var wire 16 / nxt_input_x [15:0] $end
   $var wire 1 9 run_latched $end
   $var wire 1 : start_passthrough_1 $end
   $var wire 1 ; start_passthrough_2 $end
   $var wire 1 < start_passthrough_3 $end
   $var wire 1 0 run $end
   $var wire 1 = mul_sign1_out $end
   $var wire 1 $ mul_sign2_out $end
   $var wire 1 1 mul_carryout_out $end
   $var wire 1 > mul_sign1_in $end
   $var wire 1 ? mul_sign2_in $end
   $var wire 1 @ mul_carryout_in $end
   $var wire 5 A mul_exp1_out [4:0] $end
   $var wire 5 % mul_exp2_out [4:0] $end
   $var wire 5 B mul_exp1_in [4:0] $end
   $var wire 5 C mul_exp2_in [4:0] $end
   $var wire 13 2 mul_product_out [12:0] $end
   $var wire 13 D mul_product_in [12:0] $end
   $var wire 1 E mul_sign_result $end
   $var wire 5 F mul_sum_exp [4:0] $end
   $var wire 1 G mul_ovf $end
   $var wire 1 H mul_unf $end
   $var wire 16 I mul_result [15:0] $end
   $var wire 10 J mul_significand_product_selected [9:0] $end
   $var wire 5 K mul_final_exp [4:0] $end
   $var wire 1 L add_sign_shifted_in $end
   $var wire 1 M add_sign_not_shifted_in $end
   $var wire 1 v add_sign_shifted_out $end
   $var wire 1 w add_sign_not_shifted_out $end
   $var wire 13 x frac_shifted_out [12:0] $end
   $var wire 13 y frac_not_shifted_out [12:0] $end
   $var wire 13 N frac_shifted_in [12:0] $end
   $var wire 13 O frac_not_shifted_in [12:0] $end
   $var wire 5 z add_exp_max_out [4:0] $end
   $var wire 5 P add_exp_max_in [4:0] $end
   $var wire 1 Q add_sign_out $end
   $var wire 1 R add_sign_in $end
   $var wire 13 S add_sum_out [12:0] $end
   $var wire 13 T add_sum_in [12:0] $end
   $var wire 1 U add_carry_out $end
   $var wire 1 V add_carry_in $end
   $var wire 5 W add_exp_max_s2_out [4:0] $end
   $var wire 5 X add_exp_max_s3_in [4:0] $end
   $var wire 16 Y accumulate_result [15:0] $end
   $var wire 5 Z add_flags [4:0] $end
   $scope module add1 $end
    $var wire 16 I floating_point1_in [15:0] $end
    $var wire 16 & floating_point2_in [15:0] $end
    $var wire 1 v sign_shifted $end
    $var wire 13 x frac_shifted [12:0] $end
    $var wire 1 w sign_not_shifted $end
    $var wire 13 y frac_not_shifted [12:0] $end
    $var wire 5 z exp_max [4:0] $end
    $var wire 5 3 unsigned_exp_diff [4:0] $end
    $var wire 1 4 cmp_out $end
    $var wire 6 [ u_exp1 [5:0] $end
    $var wire 6 ' u_exp2 [5:0] $end
    $var wire 6 5 diff [5:0] $end
    $var wire 1 \ frac_leading_bit_fp1 $end
    $var wire 1 ( frac_leading_bit_fp2 $end
   $upscope $end
   $scope module add2 $end
    $var wire 13 N frac1 [12:0] $end
    $var wire 1 L sign1 $end
    $var wire 13 O frac2 [12:0] $end
    $var wire 1 M sign2 $end
    $var wire 5 P exp_max_in [4:0] $end
    $var wire 1 Q sign_out $end
    $var wire 13 S sum [12:0] $end
    $var wire 1 U carry_out $end
    $var wire 5 W exp_max_out [4:0] $end
    $var wire 14 ] frac1_signed [13:0] $end
    $var wire 14 ^ frac2_signed [13:0] $end
    $var wire 14 _ sum_signed [13:0] $end
    $scope module add_signed_fracs $end
     $var wire 14 ] frac1 [13:0] $end
     $var wire 14 ^ frac2 [13:0] $end
     $var wire 14 _ sum [13:0] $end
     $var wire 1 U ovf $end
    $upscope $end
    $scope module change_to_signed1 $end
     $var wire 1 L sign $end
     $var wire 13 N frac_unsigned [12:0] $end
     $var wire 14 ] frac_signed [13:0] $end
    $upscope $end
    $scope module change_to_signed2 $end
     $var wire 1 M sign $end
     $var wire 13 O frac_unsigned [12:0] $end
     $var wire 14 ^ frac_signed [13:0] $end
    $upscope $end
    $scope module change_to_unsigned $end
     $var wire 14 _ frac_signed [13:0] $end
     $var wire 1 Q sign $end
     $var wire 13 S frac_unsigned [12:0] $end
     $var wire 14 ` rfrac_signed [13:0] $end
    $upscope $end
   $upscope $end
   $scope module add3 $end
    $var wire 1 | ovf_in $end
    $var wire 1 | unf_in $end
    $var wire 1 | dz $end
    $var wire 1 | inv $end
    $var wire 3 } frm [2:0] $end
    $var wire 5 X exponent_max_in [4:0] $end
    $var wire 1 R sign_in $end
    $var wire 13 T frac_in [12:0] $end
    $var wire 1 V carry_out $end
    $var wire 16 Y floating_point_out [15:0] $end
    $var wire 5 Z flags [4:0] $end
    $var wire 1 a inexact $end
    $var wire 5 b exp_minus_shift_amount [4:0] $end
    $var wire 13 c shifted_frac [12:0] $end
    $var wire 5 d shifted_amount [4:0] $end
    $var wire 5 e exp_out [4:0] $end
    $var wire 1 f ovf $end
    $var wire 1 g unf $end
    $var wire 6 h u_exp1 [5:0] $end
    $var wire 6 i u_shifted_amount [5:0] $end
    $var wire 6 j u_result [5:0] $end
    $var wire 12 k round_this [11:0] $end
    $var wire 16 l round_out [15:0] $end
    $var wire 1 m round_flag $end
    $var wire 12 n rounded_fraction [11:0] $end
    $scope module shift_left $end
     $var wire 13 T fraction [12:0] $end
     $var wire 13 c result [12:0] $end
     $var wire 5 d shifted_amount [4:0] $end
    $upscope $end
   $upscope $end
   $scope module mul1 $end
    $var wire 16 8 fp1_in [15:0] $end
    $var wire 16 ) fp2_in [15:0] $end
    $var wire 1 = sign1 $end
    $var wire 1 $ sign2 $end
    $var wire 5 A exp1 [4:0] $end
    $var wire 5 % exp2 [4:0] $end
    $var wire 13 2 product [12:0] $end
    $var wire 1 1 carry_out $end
    $var wire 1 o frac_leading_bit_fp1 $end
    $var wire 1 * frac_leading_bit_fp2 $end
    $scope module MUL $end
     $var wire 13 p frac_in1 [12:0] $end
     $var wire 13 + frac_in2 [12:0] $end
     $var wire 13 2 frac_out [12:0] $end
     $var wire 1 1 overflow $end
     $var wire 26 6 frac_out_26b [25:0] $end
    $upscope $end
   $upscope $end
   $scope module mul2 $end
    $var wire 1 > sign1 $end
    $var wire 1 ? sign2 $end
    $var wire 5 B exp1 [4:0] $end
    $var wire 5 C exp2 [4:0] $end
    $var wire 1 E sign_out $end
    $var wire 5 F sum_exp [4:0] $end
    $var wire 1 G ovf $end
    $var wire 1 H unf $end
    $var wire 1 @ carry $end
    $scope module add_EXPs $end
     $var wire 1 @ carry $end
     $var wire 5 B exp1 [4:0] $end
     $var wire 5 C exp2 [4:0] $end
     $var wire 5 F sum [4:0] $end
     $var wire 1 G ovf $end
     $var wire 1 H unf $end
     $var wire 5 q r_exp1 [4:0] $end
     $var wire 5 r r_exp2 [4:0] $end
     $var wire 5 s r_sum [4:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000 %
b0000000000000000 &
b000000 '
0(
b0000000000000000 )
0*
b0000000000000 +
0,
b0000000000000000 -
0.
b0000000000000000 /
00
01
b0000000000000 2
b00000 3
04
b000000 5
b00000000000000000000000000 6
17
b0000000000000000 8
09
0:
0;
0<
0=
0>
0?
0@
b00000 A
b00000 B
b00000 C
b0000000000000 D
0E
b10001 F
0G
1H
b0000000000000000 I
b0000000000 J
b00000 K
0L
0M
b0000000000000 N
b0000000000000 O
b00000 P
0Q
0R
b0000000000000 S
b0000000000000 T
0U
0V
b00000 W
b00000 X
b0000000000000000 Y
b00000 Z
b000000 [
0\
b00000000000000 ]
b00000000000000 ^
b00000000000000 _
b00000000000000 `
0a
b00000 b
b0000000000000 c
b00000 d
b00000 e
0f
0g
b000000 h
b000000 i
b000000 j
b000000000000 k
b0000000000000000 l
0m
b000000000000 n
0o
b0000000000000 p
b10000 q
b10000 r
b00000 s
b0000000000000000 t
0u
0v
0w
b0000000000000 x
b0000000000000 y
b00000 z
b00000000000000000000000000000001 {
0|
b001 }
b00000000000000000000000000000100 ~
b00000000000000000000000000010000 !!
b00000000000000000000000000000010 "!
b000 #!
#500
1u
#1000
1#
0u
#1500
b10001 %
b0100010100000000 &
b010001 '
1(
b0100011100000000 )
1*
b1110000000000 +
b0100000000000000 -
b10001 3
14
b010001 5
1u
b1010000000000 y
b10001 z
#2000
0u
#2500
1u
#3000
0u
#3500
1u
#4000
0u
#4500
1.
b0100000000000000 /
b1110000000000 2
b01110000000000000000000000 6
b0100000000000000 8
b10000 A
1o
b1000000000000 p
1u
#5000
0u
#5500
1,
0.
10
b00001 3
04
b000001 5
07
19
1:
b10000 B
b10001 C
b1110000000000 D
b10010 F
0H
b0100101100000000 I
b1100000000 J
b10010 K
b1010000000000 O
b10001 P
b1010000000000 S
b10001 W
b010010 [
1\
b01010000000000 ^
b01010000000000 _
b01010000000000 `
b00000 q
b00001 r
b00001 s
1u
b0101000000000 x
b1110000000000 y
b10010 z
#6000
0u
#6500
0,
0:
1;
b0101000000000 N
b1110000000000 O
b10010 P
b0011000000000 S
b1010000000000 T
1U
b10010 W
b10001 X
b0100010100000000 Y
b00101000000000 ]
b01110000000000 ^
b00011000000000 _
b00011000000000 `
b10001 b
b1010000000000 c
b10001 e
b010001 h
b010001 j
b010000000000 k
b0100010100000000 l
b010000000000 n
b0100010100000000 t
1u
#7000
0u
#7500
0;
1<
b0011000000000 T
1V
b10010 X
b0100110011000000 Y
b10000 b
b1100000000000 c
b00010 d
b10011 e
b010010 h
b000010 i
b010000 j
b001100000000 k
b0100110011000000 l
b001100000000 n
b0100110011000000 t
1u
#8000
0u
#8500
00
17
09
0<
1u
#9000
0u
#9500
1u
#10000
0u
#10500
1u
#11000
0u
#11500
1u
#12000
0u
#12500
b00000 %
b0100110011000000 &
b010011 '
b0000000000000000 )
0*
b0000000000000 +
b0000000000000000 -
1.
b0000000000000000 /
b0000000000000 2
14
b00000000000000000000000000 6
b0000000000000000 8
b00000 A
0o
b0000000000000 p
1u
b0111000000000 x
b1001100000000 y
b10011 z
#13000
0u
#13500
1,
0.
10
b10011 3
b010011 5
07
19
1:
b00000 B
b00000 C
b0000000000000 D
b10001 F
1H
b0000000000000000 I
b0000000000 J
b00000 K
b0111000000000 N
b1001100000000 O
b10011 P
b0000100000000 S
b10011 W
b000000 [
0\
b00111000000000 ]
b01001100000000 ^
b00000100000000 _
b00000100000000 `
b10000 q
b10000 r
b00000 s
1u
b0000000000000 x
#14000
0u
#14500
0,
0:
1;
b0000000000000 N
b1001100000000 S
b0000100000000 T
0U
b10011 X
b0101000000100000 Y
b00000000000000 ]
b01001100000000 _
b01001100000000 `
b01111 b
b1000000000000 c
b00100 d
b10100 e
b010011 h
b000100 i
b001111 j
b000010000000 k
b0101000000100000 l
b000010000000 n
b0101000000100000 t
1u
#15000
0u
#15500
0;
1<
b1001100000000 T
0V
b0100110011000000 Y
b10011 b
b1001100000000 c
b00000 d
b10011 e
b000000 i
b010011 j
b001100000000 k
b0100110011000000 l
b001100000000 n
b0100110011000000 t
1u
#16000
0u
#16500
00
17
09
0<
1u
#17000
0u
#17500
1u
#18000
0u
#18500
1u
#19000
0u
#19500
1u
#20000
0u
#20500
1u
