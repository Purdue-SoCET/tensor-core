$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module MAC_unit_tb $end
  $var wire 32 t CLK_PERIOD [31:0] $end
  $var wire 1 g tb_clk $end
  $var wire 1 # tb_nrst $end
  $scope module mac_if $end
   $var wire 32 { data_w [31:0] $end
   $var wire 1 / start $end
   $var wire 1 | count $end
   $var wire 16 , weight [15:0] $end
   $var wire 16 + in_value [15:0] $end
   $var wire 16 ( in_accumulate [15:0] $end
   $var wire 16 f out_accumulate [15:0] $end
  $upscope $end
  $scope module dut $end
   $var wire 1 g clk $end
   $var wire 1 # nRST $end
   $scope module mac_if $end
    $var wire 32 { data_w [31:0] $end
    $var wire 1 / start $end
    $var wire 1 | count $end
    $var wire 16 , weight [15:0] $end
    $var wire 16 + in_value [15:0] $end
    $var wire 16 ( in_accumulate [15:0] $end
    $var wire 16 f out_accumulate [15:0] $end
   $upscope $end
   $var wire 1 0 run_latched $end
   $var wire 1 1 start_passthrough_1 $end
   $var wire 1 2 start_passthrough_2 $end
   $var wire 1 3 start_passthrough_3 $end
   $var wire 1 h run $end
   $var wire 1 $ mul_sign1_out $end
   $var wire 1 % mul_sign2_out $end
   $var wire 1 i mul_carryout_out $end
   $var wire 1 4 mul_sign1_in $end
   $var wire 1 5 mul_sign2_in $end
   $var wire 1 6 mul_carryout_in $end
   $var wire 5 & mul_exp1_out [4:0] $end
   $var wire 5 ' mul_exp2_out [4:0] $end
   $var wire 5 7 mul_exp1_in [4:0] $end
   $var wire 5 8 mul_exp2_in [4:0] $end
   $var wire 13 j mul_product_out [12:0] $end
   $var wire 13 9 mul_product_in [12:0] $end
   $var wire 1 : mul_sign_result $end
   $var wire 5 ; mul_sum_exp [4:0] $end
   $var wire 1 < mul_ovf $end
   $var wire 1 = mul_unf $end
   $var wire 16 > mul_result [15:0] $end
   $var wire 10 ? mul_significand_product_selected [9:0] $end
   $var wire 1 @ add_sign_shifted_in $end
   $var wire 1 A add_sign_not_shifted_in $end
   $var wire 1 k add_sign_shifted_out $end
   $var wire 1 l add_sign_not_shifted_out $end
   $var wire 13 m frac_shifted_out [12:0] $end
   $var wire 13 n frac_not_shifted_out [12:0] $end
   $var wire 13 B frac_shifted_in [12:0] $end
   $var wire 13 C frac_not_shifted_in [12:0] $end
   $var wire 5 o add_exp_max_out [4:0] $end
   $var wire 5 D add_exp_max_in [4:0] $end
   $var wire 1 E add_sign_out $end
   $var wire 1 F add_sign_in $end
   $var wire 13 G add_sum_out [12:0] $end
   $var wire 13 H add_sum_in [12:0] $end
   $var wire 1 I add_carry_out $end
   $var wire 1 J add_carry_in $end
   $var wire 5 K add_exp_max_s2_out [4:0] $end
   $var wire 5 L add_exp_max_s3_in [4:0] $end
   $var wire 16 M accumulate_result [15:0] $end
   $var wire 5 N add_flags [4:0] $end
   $scope module add1 $end
    $var wire 16 > floating_point1_in [15:0] $end
    $var wire 16 ( floating_point2_in [15:0] $end
    $var wire 1 k sign_shifted $end
    $var wire 13 m frac_shifted [12:0] $end
    $var wire 1 l sign_not_shifted $end
    $var wire 13 n frac_not_shifted [12:0] $end
    $var wire 5 o exp_max [4:0] $end
    $var wire 5 p unsigned_exp_diff [4:0] $end
    $var wire 1 q cmp_out $end
    $scope module cmp_exponents $end
     $var wire 5 ; exp1 [4:0] $end
     $var wire 5 ) exp2 [4:0] $end
     $var wire 5 p u_diff [4:0] $end
     $var wire 1 q cmp_out $end
     $var wire 6 O u_exp1 [5:0] $end
     $var wire 6 * u_exp2 [5:0] $end
     $var wire 6 r diff [5:0] $end
    $upscope $end
   $upscope $end
   $scope module add2 $end
    $var wire 13 B frac1 [12:0] $end
    $var wire 1 @ sign1 $end
    $var wire 13 C frac2 [12:0] $end
    $var wire 1 A sign2 $end
    $var wire 5 D exp_max_in [4:0] $end
    $var wire 1 E sign_out $end
    $var wire 13 G sum [12:0] $end
    $var wire 1 I carry_out $end
    $var wire 5 K exp_max_out [4:0] $end
    $var wire 14 P frac1_signed [13:0] $end
    $var wire 14 Q frac2_signed [13:0] $end
    $var wire 14 R sum_signed [13:0] $end
    $scope module add_signed_fracs $end
     $var wire 14 P frac1 [13:0] $end
     $var wire 14 Q frac2 [13:0] $end
     $var wire 14 R sum [13:0] $end
     $var wire 1 I ovf $end
    $upscope $end
    $scope module change_to_signed1 $end
     $var wire 1 @ sign $end
     $var wire 13 B frac_unsigned [12:0] $end
     $var wire 14 P frac_signed [13:0] $end
    $upscope $end
    $scope module change_to_signed2 $end
     $var wire 1 A sign $end
     $var wire 13 C frac_unsigned [12:0] $end
     $var wire 14 Q frac_signed [13:0] $end
    $upscope $end
    $scope module change_to_unsigned $end
     $var wire 14 R frac_signed [13:0] $end
     $var wire 1 E sign $end
     $var wire 13 G frac_unsigned [12:0] $end
     $var wire 14 S rfrac_signed [13:0] $end
    $upscope $end
   $upscope $end
   $scope module add3 $end
    $var wire 1 u ovf_in $end
    $var wire 1 u unf_in $end
    $var wire 1 u dz $end
    $var wire 1 u inv $end
    $var wire 3 v frm [2:0] $end
    $var wire 5 L exponent_max_in [4:0] $end
    $var wire 1 F sign_in $end
    $var wire 13 H frac_in [12:0] $end
    $var wire 1 J carry_out $end
    $var wire 16 M floating_point_out [15:0] $end
    $var wire 5 N flags [4:0] $end
    $var wire 1 T inexact $end
    $var wire 1 F sign $end
    $var wire 5 U exponent [4:0] $end
    $var wire 10 V frac [9:0] $end
    $var wire 5 W exp_minus_shift_amount [4:0] $end
    $var wire 13 X shifted_frac [12:0] $end
    $var wire 5 Y shifted_amount [4:0] $end
    $var wire 5 Z exp_out [4:0] $end
    $var wire 1 [ ovf $end
    $var wire 1 \ unf $end
    $var wire 12 ] round_this [11:0] $end
    $var wire 16 ^ round_out [15:0] $end
    $var wire 1 _ round_flag $end
    $scope module ROUND $end
     $var wire 3 v frm [2:0] $end
     $var wire 1 F sign $end
     $var wire 5 Z exp_in [4:0] $end
     $var wire 12 ] fraction [11:0] $end
     $var wire 16 ^ round_out [15:0] $end
     $var wire 1 _ rounded $end
     $var wire 1 _ round_amount $end
     $var wire 3 w RNE [2:0] $end
     $var wire 3 v RZE [2:0] $end
     $var wire 3 x RDN [2:0] $end
     $var wire 3 y RUP [2:0] $end
     $var wire 3 z RMM [2:0] $end
    $upscope $end
    $scope module SUB $end
     $var wire 5 L exp1 [4:0] $end
     $var wire 5 Y shifted_amount [4:0] $end
     $var wire 5 W result [4:0] $end
     $var wire 6 ` u_exp1 [5:0] $end
     $var wire 6 a u_shifted_amount [5:0] $end
     $var wire 6 b u_result [5:0] $end
    $upscope $end
    $scope module shift_left $end
     $var wire 13 H fraction [12:0] $end
     $var wire 13 X result [12:0] $end
     $var wire 5 Y shifted_amount [4:0] $end
    $upscope $end
   $upscope $end
   $scope module mul1 $end
    $var wire 16 + fp1_in [15:0] $end
    $var wire 16 , fp2_in [15:0] $end
    $var wire 1 $ sign1 $end
    $var wire 1 % sign2 $end
    $var wire 5 & exp1 [4:0] $end
    $var wire 5 ' exp2 [4:0] $end
    $var wire 13 j product [12:0] $end
    $var wire 1 i carry_out $end
    $scope module MUL $end
     $var wire 13 - frac_in1 [12:0] $end
     $var wire 13 . frac_in2 [12:0] $end
     $var wire 13 j frac_out [12:0] $end
     $var wire 1 i overflow $end
     $var wire 26 s frac_out_26b [25:0] $end
    $upscope $end
   $upscope $end
   $scope module mul2 $end
    $var wire 1 4 sign1 $end
    $var wire 1 5 sign2 $end
    $var wire 5 7 exp1 [4:0] $end
    $var wire 5 8 exp2 [4:0] $end
    $var wire 1 : sign_out $end
    $var wire 5 ; sum_exp [4:0] $end
    $var wire 1 < ovf $end
    $var wire 1 = unf $end
    $var wire 1 6 carry $end
    $scope module add_EXPs $end
     $var wire 1 6 carry $end
     $var wire 5 7 exp1 [4:0] $end
     $var wire 5 8 exp2 [4:0] $end
     $var wire 5 ; sum [4:0] $end
     $var wire 1 < ovf $end
     $var wire 1 = unf $end
     $var wire 5 c r_exp1 [4:0] $end
     $var wire 5 d r_exp2 [4:0] $end
     $var wire 5 e r_sum [4:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b00000 &
b00000 '
b0000000000000000 (
b00000 )
b000000 *
b0000000000000000 +
b0000000000000000 ,
b1000000000000 -
b1000000000000 .
0/
00
01
02
03
04
05
06
b00000 7
b00000 8
b0000000000000 9
0:
b10001 ;
0<
1=
b0100010000000000 >
b0000000000 ?
0@
0A
b0000000000000 B
b0000000000000 C
b00000 D
0E
0F
b0000000000000 G
b0000000000000 H
0I
0J
b00000 K
b00000 L
b0000000000000000 M
b00000 N
b010001 O
b00000000000000 P
b00000000000000 Q
b00000000000000 R
b00000000000000 S
0T
b00000 U
b0000000000 V
b00000 W
b0000000000000 X
b00000 Y
b00000 Z
0[
0\
b000000000000 ]
b0000000000000000 ^
0_
b000000 `
b000000 a
b000000 b
b10000 c
b10000 d
b00000 e
b0000000000000000 f
0g
0h
0i
b1000000000000 j
0k
0l
b0000000000000 m
b1000000000000 n
b10001 o
b10001 p
0q
b010001 r
b01000000000000000000000000 s
b00000000000000000000000000000001 t
0u
b001 v
b000 w
b010 x
b011 y
b100 z
b00000000000000000000000000010000 {
0|
#500
1g
#1000
1#
b10010 &
b10000 '
b0100010100000000 (
b10001 )
b010001 *
b0100101110000000 +
b0100000000000000 ,
b1111000000000 -
0g
b1111000000000 j
b1010000000000 m
b00000 p
b000000 r
b01111000000000000000000000 s
#1500
1g
#2000
0g
#2500
1g
#3000
1/
0g
1h
#3500
10
11
b10010 7
b10000 8
b1111000000000 9
b10011 ;
0=
b0100111110000000 >
b1110000000 ?
b1010000000000 B
b1000000000000 C
b10001 D
b0010000000000 G
1I
b10001 K
b010011 O
b01010000000000 P
b01000000000000 Q
b00010000000000 R
b00010000000000 S
b00010 c
b00000 d
b00010 e
1g
b0010100000000 m
b1111000000000 n
b10011 o
b00010 p
b000010 r
#4000
0/
0g
#4500
01
12
b0010100000000 B
b1111000000000 C
b10011 D
b0001100000000 G
b0010000000000 H
1J
b10011 K
b10001 L
b0100100010000000 M
b00010100000000 P
b01111000000000 Q
b00001100000000 R
b00001100000000 S
b10010 U
b0010000000 V
b01111 W
b1000000000000 X
b00010 Y
b10010 Z
b001000000000 ]
b0100100010000000 ^
b010001 `
b000010 a
b001111 b
b0100100010000000 f
1g
#5000
0g
#5500
02
13
b0001100000000 H
b10011 L
b0101000001100000 M
b10100 U
b0001100000 V
b10000 W
b1100000000000 X
b00011 Y
b10100 Z
b000110000000 ]
b0101000001100000 ^
b010011 `
b000011 a
b010000 b
b0101000001100000 f
1g
#6000
0g
#6500
00
03
1g
0h
#7000
0g
#7500
1g
#8000
0g
#8500
1g
#9000
b10000 &
b10111 '
b0101100011000011 (
b10110 )
b010110 *
b0100001110011010 +
b0101110010010110 ,
b1111001101000 -
b1001001011000 .
1/
0g
1h
1i
b0001011011100 j
b0001111000000 m
b1001100001100 n
b10110 o
b00011 p
1q
b000011 r
b10001011011100001111000000 s
#9500
10
11
16
b10000 7
b10111 8
b0001011011100 9
b11001 ;
b0110010001011011 >
b0001011011 ?
b0001111000000 B
b1001100001100 C
b10110 D
b1011011001100 G
0I
b10110 K
b011001 O
b00001111000000 P
b01001100001100 Q
b01011011001100 R
b01011011001100 S
b00000 c
b00111 d
b00111 e
1g
b0001001100001 m
b1000101101100 n
b11001 o
0q
#10000
0/
0g
#10500
01
12
b0001001100001 B
b1000101101100 C
b11001 D
b1001111001101 G
b1011011001100 H
0J
b11001 K
b10110 L
b0101100110110011 M
b00001001100001 P
b01000101101100 Q
b01001111001101 R
b01001111001101 S
b10110 U
b0110110011 V
b10110 W
b1011011001100 X
b00000 Y
b10110 Z
b011011001100 ]
b0101100110110011 ^
b010110 `
b000000 a
b010110 b
b0101100110110011 f
1g
#11000
0g
#11500
02
13
b1001111001101 H
b11001 L
b0110010011110011 M
b11001 U
b0011110011 V
b11001 W
b1001111001101 X
b11001 Z
b001111001101 ]
b0110010011110011 ^
b011001 `
b011001 b
b0110010011110011 f
1g
#12000
0g
#12500
00
03
1g
0h
#13000
0g
#13500
1g
#14000
0g
#14500
1g
#15000
0g
#15500
1g
#16000
0g
