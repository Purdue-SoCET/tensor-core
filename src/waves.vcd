$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module MAC_unit_tb $end
  $var wire 32 u CLK_PERIOD [31:0] $end
  $var wire 1 o tb_clk $end
  $var wire 1 # tb_nrst $end
  $scope module mac_if $end
   $var wire 32 v data_w [31:0] $end
   $var wire 32 w mul_len [31:0] $end
   $var wire 32 x add_len [31:0] $end
   $var wire 1 * start $end
   $var wire 3 { count [2:0] $end
   $var wire 16 ( weight [15:0] $end
   $var wire 16 + in_value [15:0] $end
   $var wire 1 , MAC_shift $end
   $var wire 16 5 in_pass [15:0] $end
   $var wire 16 & in_accumulate [15:0] $end
   $var wire 16 n out_accumulate [15:0] $end
  $upscope $end
  $scope module dut $end
   $var wire 32 v WIDTH [31:0] $end
   $var wire 32 w MUL_LEN [31:0] $end
   $var wire 32 x ADD_LEN [31:0] $end
   $var wire 1 o clk $end
   $var wire 1 # nRST $end
   $scope module mac_if $end
    $var wire 32 v data_w [31:0] $end
    $var wire 32 w mul_len [31:0] $end
    $var wire 32 x add_len [31:0] $end
    $var wire 1 * start $end
    $var wire 3 { count [2:0] $end
    $var wire 16 ( weight [15:0] $end
    $var wire 16 + in_value [15:0] $end
    $var wire 1 , MAC_shift $end
    $var wire 16 5 in_pass [15:0] $end
    $var wire 16 & in_accumulate [15:0] $end
    $var wire 16 n out_accumulate [15:0] $end
   $upscope $end
   $var wire 16 5 input_x [15:0] $end
   $var wire 16 - nxt_input_x [15:0] $end
   $var wire 1 6 run_latched $end
   $var wire 1 7 start_passthrough_1 $end
   $var wire 1 8 start_passthrough_2 $end
   $var wire 1 9 start_passthrough_3 $end
   $var wire 1 . run $end
   $var wire 1 : mul_sign1_out $end
   $var wire 1 $ mul_sign2_out $end
   $var wire 1 / mul_carryout_out $end
   $var wire 1 ; mul_sign1_in $end
   $var wire 1 < mul_sign2_in $end
   $var wire 1 = mul_carryout_in $end
   $var wire 5 > mul_exp1_out [4:0] $end
   $var wire 5 % mul_exp2_out [4:0] $end
   $var wire 5 ? mul_exp1_in [4:0] $end
   $var wire 5 @ mul_exp2_in [4:0] $end
   $var wire 13 0 mul_product_out [12:0] $end
   $var wire 13 A mul_product_in [12:0] $end
   $var wire 1 B mul_sign_result $end
   $var wire 5 C mul_sum_exp [4:0] $end
   $var wire 1 D mul_ovf $end
   $var wire 1 E mul_unf $end
   $var wire 16 F mul_result [15:0] $end
   $var wire 10 G mul_significand_product_selected [9:0] $end
   $var wire 1 H add_sign_shifted_in $end
   $var wire 1 I add_sign_not_shifted_in $end
   $var wire 1 p add_sign_shifted_out $end
   $var wire 1 q add_sign_not_shifted_out $end
   $var wire 13 r frac_shifted_out [12:0] $end
   $var wire 13 s frac_not_shifted_out [12:0] $end
   $var wire 13 J frac_shifted_in [12:0] $end
   $var wire 13 K frac_not_shifted_in [12:0] $end
   $var wire 5 t add_exp_max_out [4:0] $end
   $var wire 5 L add_exp_max_in [4:0] $end
   $var wire 1 M add_sign_out $end
   $var wire 1 N add_sign_in $end
   $var wire 13 O add_sum_out [12:0] $end
   $var wire 13 P add_sum_in [12:0] $end
   $var wire 1 Q add_carry_out $end
   $var wire 1 R add_carry_in $end
   $var wire 5 S add_exp_max_s2_out [4:0] $end
   $var wire 5 T add_exp_max_s3_in [4:0] $end
   $var wire 16 U accumulate_result [15:0] $end
   $var wire 5 V add_flags [4:0] $end
   $scope module add1 $end
    $var wire 16 F floating_point1_in [15:0] $end
    $var wire 16 & floating_point2_in [15:0] $end
    $var wire 1 p sign_shifted $end
    $var wire 13 r frac_shifted [12:0] $end
    $var wire 1 q sign_not_shifted $end
    $var wire 13 s frac_not_shifted [12:0] $end
    $var wire 5 t exp_max [4:0] $end
    $var wire 5 1 unsigned_exp_diff [4:0] $end
    $var wire 1 2 cmp_out $end
    $var wire 6 W u_exp1 [5:0] $end
    $var wire 6 ' u_exp2 [5:0] $end
    $var wire 6 3 diff [5:0] $end
   $upscope $end
   $scope module add2 $end
    $var wire 13 J frac1 [12:0] $end
    $var wire 1 H sign1 $end
    $var wire 13 K frac2 [12:0] $end
    $var wire 1 I sign2 $end
    $var wire 5 L exp_max_in [4:0] $end
    $var wire 1 M sign_out $end
    $var wire 13 O sum [12:0] $end
    $var wire 1 Q carry_out $end
    $var wire 5 S exp_max_out [4:0] $end
    $var wire 14 X frac1_signed [13:0] $end
    $var wire 14 Y frac2_signed [13:0] $end
    $var wire 14 Z sum_signed [13:0] $end
    $scope module add_signed_fracs $end
     $var wire 14 X frac1 [13:0] $end
     $var wire 14 Y frac2 [13:0] $end
     $var wire 14 Z sum [13:0] $end
     $var wire 1 Q ovf $end
    $upscope $end
    $scope module change_to_signed1 $end
     $var wire 1 H sign $end
     $var wire 13 J frac_unsigned [12:0] $end
     $var wire 14 X frac_signed [13:0] $end
    $upscope $end
    $scope module change_to_signed2 $end
     $var wire 1 I sign $end
     $var wire 13 K frac_unsigned [12:0] $end
     $var wire 14 Y frac_signed [13:0] $end
    $upscope $end
    $scope module change_to_unsigned $end
     $var wire 14 Z frac_signed [13:0] $end
     $var wire 1 M sign $end
     $var wire 13 O frac_unsigned [12:0] $end
     $var wire 14 [ rfrac_signed [13:0] $end
    $upscope $end
   $upscope $end
   $scope module add3 $end
    $var wire 1 y ovf_in $end
    $var wire 1 y unf_in $end
    $var wire 1 y dz $end
    $var wire 1 y inv $end
    $var wire 3 z frm [2:0] $end
    $var wire 5 T exponent_max_in [4:0] $end
    $var wire 1 N sign_in $end
    $var wire 13 P frac_in [12:0] $end
    $var wire 1 R carry_out $end
    $var wire 16 U floating_point_out [15:0] $end
    $var wire 5 V flags [4:0] $end
    $var wire 1 \ inexact $end
    $var wire 5 ] exp_minus_shift_amount [4:0] $end
    $var wire 13 ^ shifted_frac [12:0] $end
    $var wire 5 _ shifted_amount [4:0] $end
    $var wire 5 ` exp_out [4:0] $end
    $var wire 1 a ovf $end
    $var wire 1 b unf $end
    $var wire 6 c u_exp1 [5:0] $end
    $var wire 6 d u_shifted_amount [5:0] $end
    $var wire 6 e u_result [5:0] $end
    $var wire 12 f round_this [11:0] $end
    $var wire 16 g round_out [15:0] $end
    $var wire 1 h round_flag $end
    $var wire 12 i rounded_fraction [11:0] $end
    $scope module shift_left $end
     $var wire 13 P fraction [12:0] $end
     $var wire 13 ^ result [12:0] $end
     $var wire 5 _ shifted_amount [4:0] $end
    $upscope $end
   $upscope $end
   $scope module mul1 $end
    $var wire 16 5 fp1_in [15:0] $end
    $var wire 16 ( fp2_in [15:0] $end
    $var wire 1 : sign1 $end
    $var wire 1 $ sign2 $end
    $var wire 5 > exp1 [4:0] $end
    $var wire 5 % exp2 [4:0] $end
    $var wire 13 0 product [12:0] $end
    $var wire 1 / carry_out $end
    $scope module MUL $end
     $var wire 13 j frac_in1 [12:0] $end
     $var wire 13 ) frac_in2 [12:0] $end
     $var wire 13 0 frac_out [12:0] $end
     $var wire 1 / overflow $end
     $var wire 26 4 frac_out_26b [25:0] $end
    $upscope $end
   $upscope $end
   $scope module mul2 $end
    $var wire 1 ; sign1 $end
    $var wire 1 < sign2 $end
    $var wire 5 ? exp1 [4:0] $end
    $var wire 5 @ exp2 [4:0] $end
    $var wire 1 B sign_out $end
    $var wire 5 C sum_exp [4:0] $end
    $var wire 1 D ovf $end
    $var wire 1 E unf $end
    $var wire 1 = carry $end
    $scope module add_EXPs $end
     $var wire 1 = carry $end
     $var wire 5 ? exp1 [4:0] $end
     $var wire 5 @ exp2 [4:0] $end
     $var wire 5 C sum [4:0] $end
     $var wire 1 D ovf $end
     $var wire 1 E unf $end
     $var wire 5 k r_exp1 [4:0] $end
     $var wire 5 l r_exp2 [4:0] $end
     $var wire 5 m r_sum [4:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000 %
b0000000000000000 &
b000000 '
b0000000000000000 (
b1000000000000 )
0*
b0000000000000000 +
0,
b0000000000000000 -
0.
0/
b1000000000000 0
b10001 1
02
b010001 3
b01000000000000000000000000 4
b0000000000000000 5
06
07
08
09
0:
0;
0<
0=
b00000 >
b00000 ?
b00000 @
b0000000000000 A
0B
b10001 C
0D
1E
b0100010000000000 F
b0000000000 G
0H
0I
b0000000000000 J
b0000000000000 K
b00000 L
0M
0N
b0000000000000 O
b0000000000000 P
0Q
0R
b00000 S
b00000 T
b0000000000000000 U
b00000 V
b010001 W
b00000000000000 X
b00000000000000 Y
b00000000000000 Z
b00000000000000 [
0\
b00000 ]
b0000000000000 ^
b00000 _
b00000 `
0a
0b
b000000 c
b000000 d
b000000 e
b000000000000 f
b0000000000000000 g
0h
b000000000000 i
b1000000000000 j
b10000 k
b10000 l
b00000 m
b0000000000000000 n
0o
0p
0q
b0000000000000 r
b1000000000000 s
b10001 t
b00000000000000000000000000000001 u
b00000000000000000000000000010000 v
b00000000000000000000000000000010 w
b00000000000000000000000000000011 x
0y
b001 z
b000 {
#500
1o
#1000
1#
0o
#1500
b10000 %
b0100010100000000 &
b010001 '
b0100000000000000 (
b0100101110000000 +
b00000 1
b000000 3
1o
b1010000000000 r
#2000
0o
#2500
1o
#3000
0o
#3500
1o
#4000
0o
#4500
1,
b0100101110000000 -
b1111000000000 0
b01111000000000000000000000 4
b0100101110000000 5
b10010 >
b1111000000000 j
1o
#5000
0o
#5500
1*
0,
1.
b00010 1
b000010 3
16
17
b10010 ?
b10000 @
b1111000000000 A
b10011 C
0E
b0100111110000000 F
b1110000000 G
b1010000000000 J
b1000000000000 K
b10001 L
b0010000000000 O
1Q
b10001 S
b010011 W
b01010000000000 X
b01000000000000 Y
b00010000000000 Z
b00010000000000 [
b00010 k
b00000 l
b00010 m
1o
b0010100000000 r
b1111000000000 s
b10011 t
#6000
0o
#6500
0*
07
18
b0010100000000 J
b1111000000000 K
b10011 L
b0001100000000 O
b0010000000000 P
1R
b10011 S
b10001 T
b0100100010000000 U
b00010100000000 X
b01111000000000 Y
b00001100000000 Z
b00001100000000 [
b01111 ]
b1000000000000 ^
b00010 _
b10010 `
b010001 c
b000010 d
b001111 e
b001000000000 f
b0100100010000000 g
b001000000000 i
b0100100010000000 n
1o
#7000
0o
#7500
08
19
b0001100000000 P
b10011 T
b0101000001100000 U
b10000 ]
b1100000000000 ^
b00011 _
b10100 `
b010011 c
b000011 d
b010000 e
b000110000000 f
b0101000001100000 g
b000110000000 i
b0101000001100000 n
1o
#8000
0o
#8500
0.
06
09
1o
#9000
0o
#9500
1o
#10000
0o
#10500
1o
#11000
0o
#11500
1o
#12000
0o
#12500
b10111 %
b0101100011000011 &
b010110 '
b0101110010010110 (
b1001001011000 )
b0100001110011010 +
1,
b0100001110011010 -
1/
b0001011011100 0
b00011 1
12
b000011 3
b10001011011100001111000000 4
b0100001110011010 5
b10000 >
b1111001101000 j
1o
b0001111000000 r
b1001100001100 s
b10110 t
#13000
0o
#13500
1*
0,
1.
02
16
17
1=
b10000 ?
b10111 @
b0001011011100 A
b11001 C
b0110010001011011 F
b0001011011 G
b0001111000000 J
b1001100001100 K
b10110 L
b1011011001100 O
0Q
b10110 S
b011001 W
b00001111000000 X
b01001100001100 Y
b01011011001100 Z
b01011011001100 [
b00000 k
b00111 l
b00111 m
1o
b0001001100001 r
b1000101101100 s
b11001 t
#14000
0o
#14500
0*
07
18
b0001001100001 J
b1000101101100 K
b11001 L
b1001111001101 O
b1011011001100 P
0R
b11001 S
b10110 T
b0101100110110011 U
b00001001100001 X
b01000101101100 Y
b01001111001101 Z
b01001111001101 [
b10110 ]
b1011011001100 ^
b00000 _
b10110 `
b010110 c
b000000 d
b010110 e
b011011001100 f
b0101100110110011 g
b011011001100 i
b0101100110110011 n
1o
#15000
0o
#15500
08
19
b1001111001101 P
b11001 T
b0110010011110011 U
b11001 ]
b1001111001101 ^
b11001 `
b011001 c
b011001 e
b001111001101 f
b0110010011110011 g
b001111001101 i
b0110010011110011 n
1o
#16000
0o
#16500
0.
06
09
1o
#17000
0o
#17500
1o
#18000
0o
#18500
1o
#19000
0o
#19500
1o
#20000
0o
#20500
1o
