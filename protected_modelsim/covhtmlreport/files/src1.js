var g_data = {"name":"./arch_package.sv","src":"// MICRON TECHNOLOGY, INC. - CONFIDENTIAL AND PROPRIETARY INFORMATION\n`ifndef DDR4_PARAMS_PKG\n `define DDR4_PARAMS_PKG\n\npackage arch_package;\n    timeunit 1ps;\n    timeprecision 1ps;\n`include \"arch_defines.v\"\n    parameter int MAX_DM_BITS         = 2;\n    parameter int MAX_DBI_BITS        = MAX_DM_BITS; // DM/DBI share pins in current spec.\n    parameter int MAX_ADDR_BITS       = 21;\n    parameter int MAX_ROW_ADDR_BITS   = 18;\n    parameter int MAX_COL_ADDR_BITS   = 13; // Include AP/BLFLY\n    parameter int MAX_BANK_BITS       = 2;\n    parameter int MAX_RANK_BITS       = 3;\n    parameter int MAX_DQ_BITS         = 16;\n    parameter int MAX_DQS_BITS        = 2;\n    parameter int MAX_CRC_EQUATION    = 8;\n    parameter int MAX_CRC_TRANSFERS   = 2;\n    parameter int MAX_BANK_GROUP_BITS = 2;\n    parameter int MAX_BURST_LEN       = 8;\n    parameter int AUTOPRECHARGEADDR   = 10;\n    parameter int BLFLYSELECT         = 12;\n    parameter int BANK_GROUP_SHIFT    = MAX_ADDR_BITS + MAX_BANK_BITS;\n    parameter int BANK_SHIFT          = MAX_ADDR_BITS;\n    parameter int MAX_MODEREGS        = 2**(MAX_BANK_BITS+MAX_BANK_GROUP_BITS);\n    parameter int MODEREG_BITS        = MAX_ADDR_BITS + MAX_BANK_BITS + MAX_BANK_GROUP_BITS;\n    parameter int MAX_MODEREG_SET_BITS = 14;\n    parameter int MAX_BANKS_PER_GROUP = 2**(MAX_BANK_BITS);\n    parameter int MAX_BANK_GROUPS     = 2**(MAX_BANK_GROUP_BITS);\n    parameter int MAX_RANKS           = 2**(MAX_RANK_BITS);\n    parameter int RTT_BITS = 16;\n    typedef enum {\n                  // Keep these in order of slowest to fastest for comparisons.\n                  TS_1875, TS_1500, TS_1250, TS_1072, TS_938, TS_833, TS_750, TS_682, TS_625, TS_560, TS_500,\n                  NUM_TS\n    } UTYPE_TS;\n\n    typedef enum {\n        TCK_MIN, TCK_MAX, TCK_RANDOM, TCK_VE2VA\n    } UTYPE_tCKMode;\n\n    typedef struct packed {\n        UTYPE_TS ts_loaded;\n        UTYPE_tCKMode tck_mode;\n        int ClockDutyCycle, tCHp_min, tCHp_max;\n        int tCK, tCK_min, tCK_max, tCK_shmoo, tOffset;\n        int tDQSQ, tQHp, tDS, tDH, tIPW;\n        int tRPREp, tRPSTp, tQSHp, tQSLp;\n        int tWPSTp, tWPREp;\n        int tDQSCK, tDQSCK_min, tDQSCK_max, tDQSCK_dll_on, tDQSCK_dll_off, tDQSCK_dll_off_min, tDQSCK_dll_off_max;\n        int tDQSLp, tDQSLp_min, tDQSLp_max, tDQSHp_min, tDQSHp_max, tDQSHp;\n        int tDQSSp, tDQSSp_min, tDQSSp_max, tDQSSp_2tCK_min, tDQSSp_2tCK_max, tDQSSp_1tCK_min, tDQSSp_1tCK_max;\n        int tDLLKc;\n        int tRTP, tRTPc, tRTP_min, tRTPc_min;\n        int tWTR_L, tWTRc_L, tWTR_L_CRC_DM, tWTRc_L_CRC_DM;\n        int tWTR_S, tWTRc_S, tWTR_S_CRC_DM, tWTRc_S_CRC_DM;\n        int tWR, tWRc, tWR_CRC_DMc, tWR_MPRc;\n        int tCAL_min, tCALc_min;\n        int tMRDc, tMOD, tMODc, tMPRRc;\n        int tRCD, tRCDc, tRP, tRPc, tRAS, tRASc, tRC, tRCc;\n        int tCCD_L, tCCDc_L, tCCD_S, tCCDc_S;\n        int tRRD_L, tRRDc_L, tRRD_S, tRRDc_S, tRRDc_dlr, tFAW, tFAWc_dlr, tIS, tIS_CKE, tIH, tDIPW;\n        int tZQinitc, tZQoperc, tZQCSc, tZQRTT, tZQRTTc;\n        int tRFC, tRFCc, tRFC1, tRFC1c, tRFC2, tRFC2c, tRFC4, tRFC4c, tRFCc_dlr;\n        int tXPR;\n        int tXS, tXSc, tXS_Fast, tXS_Fastc, tXSDLLc, tCKESRc, tCKSRE, tCKSREc, tCKSRX, tCKSRXc, tXSR;\n        int tXP, tXPc, tXPDLL, tXPDLLc, tCKE, tCKEc, tCPDEDc, tPD, tPDc;\n        int tACTPDENc, tPREPDENc, tREFPDENc, tMRSPDENc, tMRSPDEN, tRDPDENc, tWRPDENc, tWRAPDENc;\n        int tODTHc, tAON, tAON_min, tAON_max, tAOFp, tAOFp_min, tAOFp_max, tADCp, tADCp_min, tADCp_max;\n        int tAONPD, tAONPDc, tAONPD_min, tAONPD_max, tAOF, tAOFPD, tAOFPDc, tAOFPD_min, tAOFPD_max, tAOFASp, tAONASp_min, tAONASp_max, tAOFASp_min, tAOFASp_max;\n        int tWLMRDc, tWLDQSENc, tWLS, tWLS_nominal, tWLSc, tWLH, tWLHc;\n        int tWLO_nominal, tWLO_min, tWLO_max, tWLOE_min, tWLOE_nominal, tWLOE_max, tWLOc_min, tWLOc_max, tWLOEc_min, tWLOEc_max;\n        int tPAR_ALERT_ON_CYCLES, tPAR_ALERT_ON, tPAR_ALERT_ON_max, tPAR_ALERT_OFF, tPAR_CLOSE_BANKS, tPAR_tRP_tRAS_adjustment, tPAR_tRP_holdoff_adjustment;\n        int tPAR_ALERT_PW, tPAR_ALERT_PW_min, tPAR_ALERT_PW_max, tPAR_ALERT_PWc, tPAR_ALERT_PWc_min, tPAR_ALERT_PWc_max;\n        int tCRC_ALERT, tCRC_ALERT_min, tCRC_ALERT_max, tCRC_ALERT_PWc_min, tCRC_ALERT_PWc_max, tCRC_ALERT_PWc, tck_crc_alert, tck_crc_alert2;\n        int tSDO, tSDOc, tSDO_max, tSDOc_max;\n        int tSYNC_GEARc, tCMD_GEARc, tGD_TRANSITIONc;\n        int tMPED, tMPEDc, tCKMPE, tCKMPEc, tCKMPX, tCKMPXc, tMPX_H, tXMPDLLc, tXMPc, tXMP_LHc_max, tXMP_LHc_min;\n        int tPWRUP, tRESET, tRESETCKE;\n        int tBSCAN_Enable, tBSCAN_Valid;\n        int tWLO_project, tRP_ref_internal, tRPc_ref_internal;\n    } UTYPE_TimingParameters;\n    parameter int FAW_DEPTH = 4;\n\n    typedef enum{\n        cmdACT, cmdPRE, cmdWR, cmdRD, cmdPREA,\n        cmdNOP, cmdDES, cmdRDA, cmdWRA, cmdBST,\n        cmdREF, cmdREFA, cmdSREFE, cmdSREFX,\n        cmdNOCLK, cmdLMR, cmdPDX, cmdAPDE, cmdPPDE, cmdZQ\n    } UTYPE_cmdtype;\n\n    // Decoding table for commands pins.\n    parameter     // {cs, act, ras, cas, we}\n        LOAD_MODE_CMD = 5'b01000,\n        REFRESH_CMD   = 5'b01001,\n        PRECHARGE_CMD = 5'b01010,\n        ACTIVATE_CMD  = 5'b00xxx,\n        WRITE_CMD     = 5'b01100,\n        READ_CMD      = 5'b01101,\n        ZQ_CMD        = 5'b01110,\n        NOP_CMD       = 5'b01111,\n        SELF_REF_CMD  = 5'b01001,\n        DESEL_CMD     = 5'b1xxxx\n    ;\n\n    class DDR4_cmd;\n        UTYPE_cmdtype cmd;\n        UTYPE_cmdtype raw_cmd;\n        int rank;\n        int bank_group;\n        int bank;\n        int addr;\n        bit odt; // Defaults to 0.\n        int sim_time; // Population optional.\n        int cycle_count; // Population optional.\n        int tCK = 10000;\n        function new();\n            cmd = cmdNOP;\n            raw_cmd = cmdNOP;\n            rank = -1;\n            bank_group = -1;\n            bank = -1;\n            addr = -1;\n            odt = 0;\n            sim_time = 0;\n            cycle_count = 0;\n            tCK = 10000;\n        endfunction\n        function void Clone(DDR4_cmd rhs);\n            this.cmd = rhs.cmd;\n            this.raw_cmd = rhs.raw_cmd;\n            this.rank = rhs.rank;\n            this.bank_group = rhs.bank_group;\n            this.bank = rhs.bank;\n            this.addr = rhs.addr;\n            this.odt = rhs.odt;\n            this.sim_time= rhs.sim_time;\n            this.cycle_count = rhs.cycle_count;\n            this.tCK = rhs.tCK;\n        endfunction\n        function void Populate(UTYPE_cmdtype cmd_, int rank_, int bank_group_, int bank_, int addr_, int tCK_);\n            cmd = cmd_;\n            rank = rank_;\n            bank_group = bank_group_;\n            bank = bank_;\n            addr = addr_;\n            tCK = tCK_;\n        endfunction\n    endclass\n\n    typedef struct packed {\n        logic [MAX_RANK_BITS-1:0] rank;\n        logic [MAX_BANK_GROUP_BITS-1:0] bg;\n        logic [MAX_BANK_BITS-1:0] ba;\n        logic [MAX_ADDR_BITS-1:0] addr;\n        UTYPE_cmdtype cmd;\n    } UTYPE_ast_cmdpkt_type;\n\n    typedef enum {rBL8=0, rBLFLY=1, rBL4=2} UTYPE_blreg;\n    typedef enum {rAL0=0, rALN1=1, rALN2=2, rALN3=3} UTYPE_alreg;\n    typedef enum {SEQ=0, INT=1} UTYPE_bt;\n    typedef enum {ODI_34=34, ODI_48=48, ODI_40=40, ODI_RES3=3} UTYPE_odi;\n    typedef enum {RTTN_DIS=0, RTTN_60=60, RTTN_120=120, RTTN_40=40, RTTN_240=240, RTTN_48=48, RTTN_80=80, RTTN_34=34} UTYPE_rttn;\n    typedef enum {RTTW_DIS=0, RTTW_120=120, RTTW_240=240, RTTW_Z=3, RTTW_80=80, RTTW_RES5=5, RTTW_RES6=6, RTTW_RES7=7} UTYPE_rttw;\n    typedef enum {SERIAL=0, PARALLEL=1, STAGGERED=2, MPR_RES3=3} UTYPE_mpr;\n    typedef enum {MPR_PATTERN=0, MPR_PARITY=1, MPR_MODEREG=2, MPR_PAGE3=3} UTYPE_mprpage;\n    typedef enum {DELAY_WRITE_4=4, DELAY_WRITE_5=5, DELAY_WRITE_6=6, DELAY_WRITE_RES3=3} UTYPE_delay_write_crc_dm;\n    typedef enum {LPASR_NORM=0, LPASR_REDUCED=1, LPASR_EXTENDED=2, LPASR_AUTO=3} UTYPE_lpasr;\n    typedef enum {REF_1X=0, REF_2X=1, REF_4X=2, REF_RES3=3, REF_RES4=4, REF_FLY2X=5, REF_FLY4X=6, REF_RES7=7} UTYPE_refmode;\n    typedef enum {CAPARITY_L0=0, CAPARITY_L4=4, CAPARITY_L5=5, CAPARITY_L6=6, CAPARITY_L8=8, CAPARITY_RES5, CAPARITY_RES6, CAPARITY_RES7} UTYPE_caparity_latency;\n    typedef enum {RTTP_DIS=0, RTTP_60=60, RTTP_120=120, RTTP_40=40, RTTP_34=34, RTTP_48=48, RTTP_80=80, RTTP_240=240} UTYPE_rttp;\n    typedef enum {VREF_DQ_RANGE1=0, VREF_DQ_RANGE2=1} UTYPE_vrefdqrange;\n\n    typedef struct packed {\n        UTYPE_blreg BL_reg; // BL value in the register.\n        int BL; // Burst length.\n        UTYPE_bt BT; // burst_type.\n        int CL;\n        bit DLL_reset;\n        int write_recovery;\n        bit DLL_enable;\n        UTYPE_odi ODI;\n        UTYPE_alreg AL_reg; // AL value in the register.\n        int AL; // Actual AL in clks.\n        bit write_levelization;\n        UTYPE_rttn rtt_nominal;\n        bit tDQS;\n        bit qOff;\n        int CWL; // cas_write_latency.\n        UTYPE_lpasr LPASR;\n        UTYPE_rttw rtt_write;\n        bit write_crc_enable;\n        bit trr_enable;\n        int trr_ba;\n        int trr_bg;\n        UTYPE_mprpage MPR_page;\n        bit MPR_enable;\n        bit gear_down;\n        bit perdram_addr;\n        bit temp_sense_enable;\n        UTYPE_refmode refresh_mode;\n        UTYPE_delay_write_crc_dm delay_write_crc_dm;\n        UTYPE_mpr MPR_mode;\n        bit DCC;\n        bit MPS;\n        bit TCR_range;\n        bit TCR_mode;\n        bit vref_monitor;\n        int CAL; // command_address_latency.\n        bit fast_self_refresh;\n        bit preamble_training;\n        int rd_preamble_clocks;\n        int wr_preamble_clocks;\n        bit ppr_enable;\n        bit sppr_enable;\n        UTYPE_caparity_latency CA_parity_latency;\n        bit crc_error;\n        bit CA_parity_error;\n        bit odt_buffer_disable;\n        UTYPE_rttp rtt_park;\n        bit sticky_parity_error;\n        bit dm_enable;\n        bit latched_dm_enable;\n        bit write_dbi;\n        bit latched_write_dbi;\n        bit read_dbi;\n        bit latched_read_dbi;\n        bit dll_frozen;\n        int vref_training_offset;\n        bit vref_training_range;\n        bit vref_training;\n        int tCCD_L;\n        // Calculated values not directly tied to LMR bits.\n        int RL, WL_calculated;\n        } UTYPE_DutModeConfig;\n\n    parameter int MIN_BL = 4;\n    parameter int DEF_BL = 8;\n    parameter int MAX_BL = MAX_BURST_LEN;\n    parameter UTYPE_bt DEF_BT = INT;\n    parameter int MIN_CL = 5;\n    parameter int MAX_CL = 32;\n    parameter int DEF_CL = 12;\n    parameter int MIN_AL = 0;\n    parameter int MAX_AL_REG = 2;\n    parameter int MAX_AL_CLKS = MAX_CL - 1;\n    parameter int MIN_CWL = 9;\n    parameter int MAX_CWL = 20;\n    parameter int DEF_CWL = 12;\n    parameter int MIN_RL = MIN_CL - 1; // subtract one for the DLL disable mode.\n    parameter int MAX_RL = MAX_CL + MAX_AL_CLKS;\n    parameter int MIN_WL = 5;\n    parameter int MAX_WL = MAX_CWL + MAX_AL_CLKS;\n    parameter int MIN_WR = 10;\n    parameter int MAX_WR = 28;\n    parameter int DEF_WR = 12;\n    parameter int MAX_CAL = 8;\n    parameter int DEF_CAL = 0;\n    parameter int MAX_PL = 8;\n    parameter UTYPE_lpasr DEF_LPASR = LPASR_NORM;\n    parameter UTYPE_rttw DEF_RTTW = RTTW_DIS;\n    parameter UTYPE_mpr DEF_MPR_MODE = SERIAL;\n    parameter UTYPE_delay_write_crc_dm DEF_DELAY_WRITE = DELAY_WRITE_4;\n    parameter int MPR_DATA_BITS = 8;\n    parameter int MPR_SELECT_BITS = 2;\n    parameter int MAX_MPR_PATTERNS = 2**(MPR_SELECT_BITS);\n    parameter int MPR_TEMP_BITS = 2;\n    parameter int MAX_MPR_TEMPS = 2**(MPR_TEMP_BITS);\n    parameter int MPR_TEMP0 = 'b0000_0000;\n    parameter int MPR_TEMP1 = 'b0000_0001;\n    parameter int MPR_TEMP2 = 'b0000_0010;\n    parameter int MPR_TEMP3 = 'b0000_0011;\n    parameter int MAX_MPR_DEFAULT_PATTERNS = 4;\n    parameter int MPR_PAT_DEFAULT0 = 'b0101_0101;\n    parameter int MPR_PAT_DEFAULT1 = 'b0011_0011;\n    parameter int MPR_PAT_DEFAULT2 = 'b0000_1111;\n    parameter int MPR_PAT_DEFAULT3 = 'b0000_0000;\n\n            \n\n    typedef enum {_2G=2, _4G=4, _8G=8, _16G=16} UTYPE_density;\n    typedef enum {DDR4, PRE_DDR5} UTYPE_archtype;\n    typedef struct packed{\n        UTYPE_archtype arch_type;\n        UTYPE_density density;\n        int by_mode;\n        int banks_per_group;\n        int bank_mask;\n        int bank_groups;\n        int bank_group_mask;\n        int ranks;\n        int banks_per_rank;\n        int rank_mask;\n        int row_addr_bits;\n        int row_cmd_bits;\n        int row_bits; // Total row bits - WITH cmd pins.\n        int row_mask; // Total row bit mask - WITH command pins.\n        int row_addr_mask; // Mask for ONLY the addr lines - NOT INCLUDING cmd pins.\n        int col_mask;\n        logic[MAX_DQ_BITS-1:0] dq_mask;\n        int num_dqs;\n        logic[MAX_DQS_BITS-1:0] dqs_mask;\n        int num_dqss;\n        logic[MAX_DM_BITS-1:0] dm_mask;\n        int num_dms;\n        // Design specific limits.\n        int min_CL, max_CL;\n        int max_CL_dbi_enabled, max_CL_dbi_disabled, min_CL_dbi_enabled, min_CL_dbi_disabled;\n        int min_CWL, max_CWL;\n        int min_CL_dll_off, max_CL_dll_off;\n        int min_CAL, max_CAL;\n        // Design specific feature enables. (1 === feature_available)\n        bit CAL_feature;\n        bit tDQS_feature;\n        bit LPASR_feature;\n        bit gear_down_feature;\n        bit trr_feature;\n        bit ppr_feature;\n        bit sppr_feature;\n        bit write_crc_feature;\n        bit write_dbi_feature;\n        bit read_dbi_feature;\n        bit dm_enable_feature;\n        bit rd_preamble_clocks_feature;\n        bit wr_preamble_clocks_feature;\n        bit preamble_training_feature;\n        bit TCR_feature;\n        bit MPS_feature;\n        bit perdram_addr_feature;\n        bit refresh_mode_feature;\n        bit parity_error_feature;\n        bit CA_parity_latency_feature;\n        int max_CA_parity_latency;\n        bit crc_error_feature;\n        bit parity_alert_feature;\n        bit sticky_parity_error_feature;\n        bit temp_sense_feature;\n        bit rtt_park_feature;\n        bit dll_frozen_feature;\n        bit cl_17_19_21_feature;\n        bit cl_a12_feature;\n        bit extended_wr;\n        bit ignore_dbi_with_mpr;\n    } UTYPE_dutconfig;\n\n    function void dut_config_populate(inout UTYPE_dutconfig dut_config);\n        dut_config.arch_type = DDR4;\n        dut_config.col_mask = 16'b0000_0011_1111_1111;\n        dut_config.row_addr_bits = 13;\n        dut_config.row_addr_mask = 16'b0001_1111_1111_1111;\n        if (4 == dut_config.by_mode) begin\n            dut_config.dq_mask = 'b0000_0000_0000_0000_0000_0000_0000_1111;\n            dut_config.dqs_mask = 'b0001;\n            dut_config.dm_enable_feature = 0;\n            dut_config.dm_mask = 'b0001;\n            dut_config.num_dqs = 4;\n            dut_config.num_dqss = 1;\n            dut_config.num_dms = 1;\n            dut_config.banks_per_group = 4;\n            dut_config.bank_mask = 4'b0011;\n            dut_config.bank_groups = 4;\n            dut_config.bank_group_mask = 4'b0011;\n        end else if (8 == dut_config.by_mode) begin\n            dut_config.dq_mask = 'b0000_0000_0000_0000_0000_0000_1111_1111;\n            dut_config.dqs_mask = 'b0001;\n            dut_config.dm_enable_feature = 1;\n            dut_config.dm_mask = 'b0001;\n            dut_config.num_dqs = 8;\n            dut_config.num_dqss = 1;\n            dut_config.num_dms = 1;\n            dut_config.banks_per_group = 4;\n            dut_config.bank_mask = 4'b0011;\n            dut_config.bank_groups = 4;\n            dut_config.bank_group_mask = 4'b0011;\n        end else if (16 == dut_config.by_mode) begin\n            dut_config.dq_mask = 'b0000_0000_0000_0000_1111_1111_1111_1111;\n            dut_config.dqs_mask = 'b0011;\n            dut_config.dm_enable_feature = 1;\n            dut_config.dm_mask = 'b0011;\n            dut_config.num_dqs = 16;\n            dut_config.num_dqss = 2;\n            dut_config.num_dms = 2;\n            dut_config.banks_per_group = 4;\n            dut_config.bank_mask = 4'b0011;\n            `ifdef DOUBLE_DENSITY\n            dut_config.bank_groups = 4;\n            dut_config.bank_group_mask = 4'b0011;\n            `else\n            dut_config.bank_groups = 2;\n            dut_config.bank_group_mask = 4'b0001;\n            `endif\n        end else begin\n            $display(\"ERROR: Unsupported DDR4 part width %0d\", dut_config.by_mode);\n            $finish;\n        end\n        dut_config.banks_per_rank = dut_config.banks_per_group * dut_config.bank_groups;\n        if ((_2G == dut_config.density) && ((8 == dut_config.by_mode) || (16 == dut_config.by_mode))) begin\n            dut_config.row_cmd_bits = 1;\n            dut_config.row_bits = 14;\n            dut_config.row_mask = 20'b0000_0011_1111_1111_1111;\n        end else if (((_2G == dut_config.density) && (4 == dut_config.by_mode)) ||\n                     ((_4G == dut_config.density) && ((8 == dut_config.by_mode) || (16 == dut_config.by_mode)))) begin\n            dut_config.row_cmd_bits = 2;\n            dut_config.row_bits = 15;\n            dut_config.row_mask = 20'b0000_0111_1111_1111_1111;\n        end else if (((_4G == dut_config.density) && (4 == dut_config.by_mode)) ||\n                     ((_8G == dut_config.density) && ((8 == dut_config.by_mode) || (16 == dut_config.by_mode)))) begin\n            dut_config.row_cmd_bits = 3;\n            dut_config.row_bits = 16;\n            dut_config.row_mask = 20'b0000_1111_1111_1111_1111;\n        end else if (((_8G == dut_config.density) && (4 == dut_config.by_mode)) ||\n                     ((_16G == dut_config.density) && ((8 == dut_config.by_mode) || (16 == dut_config.by_mode)))) begin\n            dut_config.row_cmd_bits = 4;\n            dut_config.row_bits = 17;\n            dut_config.row_mask = 20'b0001_1111_1111_1111_1111;\n        end else if ((_16G == dut_config.density) && (4 == dut_config.by_mode)) begin\n            dut_config.row_cmd_bits = 5;\n            dut_config.row_bits = 18;\n            dut_config.row_mask = 20'b0011_1111_1111_1111_1111;\n        end else begin\n            $display(\"ERROR: Unsupported DDR4 density(%0d) and width(%0d) combination @%0t\",\n                     dut_config.density, dut_config.by_mode, $time);\n            $finish;\n        end\n        dut_config.min_CL = MIN_CL;\n        dut_config.max_CL = MAX_CL;\n        dut_config.max_CL_dbi_enabled = MAX_CL;\n        dut_config.max_CL_dbi_disabled = MAX_CL;\n        dut_config.min_CL_dbi_enabled = MIN_CL;\n        dut_config.min_CL_dbi_disabled = MIN_CL;\n        dut_config.min_CL_dll_off = MIN_CL;\n        dut_config.max_CL_dll_off = MAX_CL;\n        dut_config.min_CWL = MIN_CWL;\n        dut_config.max_CWL = MAX_CWL;\n        dut_config.min_CAL = 3;\n        dut_config.max_CAL = MAX_CAL;\n        dut_config.max_CA_parity_latency = 8;\n        dut_config.CAL_feature = 1;\n        dut_config.tDQS_feature = 1;\n        dut_config.LPASR_feature = 1;\n        dut_config.gear_down_feature = 1;\n        dut_config.trr_feature = 0;\n        dut_config.ppr_feature = 1;\n        dut_config.sppr_feature = 1;\n        dut_config.write_crc_feature = 1;\n        dut_config.write_dbi_feature = 1;\n        dut_config.read_dbi_feature = 1;\n        dut_config.rd_preamble_clocks_feature = 1;\n        dut_config.wr_preamble_clocks_feature = 1;\n        dut_config.preamble_training_feature = 1;\n        dut_config.TCR_feature = 1;\n        dut_config.MPS_feature = 1;\n        dut_config.perdram_addr_feature = 1;\n        dut_config.refresh_mode_feature = 1;\n        dut_config.parity_error_feature = 1;\n        dut_config.sticky_parity_error_feature = 1;\n        dut_config.CA_parity_latency_feature = 1;\n        dut_config.crc_error_feature = 1;\n        dut_config.parity_alert_feature = 1;\n        dut_config.temp_sense_feature = 1;\n        dut_config.rtt_park_feature = 1;\n        dut_config.dll_frozen_feature = 1;\n        dut_config.cl_17_19_21_feature = 1;\n        dut_config.cl_a12_feature = 1;\n        dut_config.extended_wr = 1;\n        dut_config.ignore_dbi_with_mpr = 1;\n    endfunction\n\n    //TAVPWR IDD new\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROW0     = 17'h00000;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROW1     = 17'h0FFFF;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROWHALF0 = 17'h000FF;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROWHALF1 = 17'h0FF00;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROW03    = 17'h0000F;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROW47    = 17'h000F0;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROW811   = 17'h00F00;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_ROW1215  = 17'h0F000;\n\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL0       = 17'h00000;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL1       = 17'h003FF;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL0_A10H  = 17'h00400;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL1_A10H  = 17'h007FF;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL_JEDECF = 17'h003F8;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL_CKB    = 17'h002AA;\n    parameter [MAX_ADDR_BITS-1:0] TAVPWR_COL_INVCKB = 17'h00155;\n    parameter TAVPWR_DATA_ONE  = 16'hffff;\n    parameter TAVPWR_DATA_ZERO = 16'h0000;\n\n    // Mode Register Definitions\n    parameter int MODE_REG_WIDTH = MODEREG_BITS;\n    parameter reg[MODEREG_BITS:0] MR0 = '0;\n    parameter reg[MODEREG_BITS:0] MR1 = MR0 | 2'b00 << BANK_GROUP_SHIFT | 2'b01 << BANK_SHIFT;\n    parameter reg[MODEREG_BITS:0] MR2 = MR0 | 2'b00 << BANK_GROUP_SHIFT | 2'b10 << BANK_SHIFT;\n    parameter reg[MODEREG_BITS:0] MR3 = MR0 | 2'b00 << BANK_GROUP_SHIFT | 2'b11 << BANK_SHIFT;\n    parameter reg[MODEREG_BITS:0] MR4 = MR0 | 2'b01 << BANK_GROUP_SHIFT | 2'b00 << BANK_SHIFT;\n    parameter reg[MODEREG_BITS:0] MR5 = MR0 | 2'b01 << BANK_GROUP_SHIFT | 2'b01 << BANK_SHIFT;\n    parameter reg[MODEREG_BITS:0] MR6 = MR0 | 2'b01 << BANK_GROUP_SHIFT | 2'b10 << BANK_SHIFT;\n    parameter reg[MODEREG_BITS:0] MR7 = MR0 | 2'b01 << BANK_GROUP_SHIFT | 2'b11 << BANK_SHIFT;\n\n    // VCS cannot use MRn in the parameter definitions below so use `MRn.\n    `define MR0 '0;\n    `define MR1 (2'b00 << BANK_GROUP_SHIFT | 2'b01 << BANK_SHIFT)\n    `define MR2 (2'b00 << BANK_GROUP_SHIFT | 2'b10 << BANK_SHIFT)\n    `define MR3 (2'b00 << BANK_GROUP_SHIFT | 2'b11 << BANK_SHIFT)\n    `define MR4 (2'b01 << BANK_GROUP_SHIFT | 2'b00 << BANK_SHIFT)\n    `define MR5 (2'b01 << BANK_GROUP_SHIFT | 2'b01 << BANK_SHIFT)\n    `define MR6 (2'b01 << BANK_GROUP_SHIFT | 2'b10 << BANK_SHIFT)\n    `define MR7 (2'b01 << BANK_GROUP_SHIFT | 2'b11 << BANK_SHIFT)\n\n    // MR0 Codes\n    parameter reg[MODEREG_BITS:0] MR0_RESERVED_BITS = 'b0011_1100_0000_1000_0000;\n\n    parameter reg[MODEREG_BITS:0] MR0_BL8   = 'b0000_0000_0000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_BLFLY = 'b0000_0000_0000_0000_0001;\n    parameter reg[MODEREG_BITS:0] MR0_BL4   = 'b0000_0000_0000_0000_0010;\n    parameter reg[MODEREG_BITS:0] MR0_BLRES = 'b0000_0000_0000_0000_0011;\n    parameter reg[MODEREG_BITS:0] MR0_DEF_BL = MR0_BLFLY;\n    parameter reg[MODEREG_BITS:0] MR0_BL_MASK = 'b0000_0000_0000_0000_0011;\n    parameter int NUM_BLMODE = 4;\n\n    parameter reg[MODEREG_BITS:0] MR0_SEQ =   'b0000_0000_0000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_INTLV = 'b0000_0000_0000_0000_1000;\n    parameter reg[MODEREG_BITS:0] MR0_DEF_BT = MR0_SEQ;\n    parameter reg[MODEREG_BITS:0] MR0_BT_MASK = 'b0000_0000_0000_0000_1000;\n    parameter reg[MODEREG_BITS:0] MR0_CL9     = 'b0000_0000_0000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL10    = 'b0000_0000_0000_0000_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL11    = 'b0000_0000_0000_0001_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL12    = 'b0000_0000_0000_0001_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL13    = 'b0000_0000_0000_0010_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL14    = 'b0000_0000_0000_0010_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL15    = 'b0000_0000_0000_0011_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL16    = 'b0000_0000_0000_0011_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL18    = 'b0000_0000_0000_0100_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL20    = 'b0000_0000_0000_0100_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL22    = 'b0000_0000_0000_0101_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL24    = 'b0000_0000_0000_0101_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL23    = 'b0000_0000_0000_0110_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL17    = 'b0000_0000_0000_0110_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL19    = 'b0000_0000_0000_0111_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL21    = 'b0000_0000_0000_0111_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL25    = 'b0000_0001_0000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL26    = 'b0000_0001_0000_0000_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL27    = 'b0000_0001_0000_0001_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL28    = 'b0000_0001_0000_0001_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL29    = 'b0000_0001_0000_0010_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL30    = 'b0000_0001_0000_0010_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL31    = 'b0000_0001_0000_0011_0000;\n    parameter reg[MODEREG_BITS:0] MR0_CL32    = 'b0000_0001_0000_0011_0100;\n    parameter reg[MODEREG_BITS:0] MR0_CL_MASK = 'b0000_0001_0000_0111_0100;\n    parameter reg[MODEREG_BITS:0] MR0_DEF_CL = MR0_CL12;\n    parameter reg[MODEREG_BITS:0] MR0_DLL_RESET = 'b0000_0000_0001_0000_0000;\n\n    parameter reg[MODEREG_BITS:0] MR0_WR10    = 'b0000_0000_0000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR12    = 'b0000_0000_0010_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR14    = 'b0000_0000_0100_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR16    = 'b0000_0000_0110_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR18    = 'b0000_0000_1000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR20    = 'b0000_0000_1010_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR24    = 'b0000_0000_1100_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR22    = 'b0000_0000_1110_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR26    = 'b0000_0010_0000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR28    = 'b0000_0010_0010_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_RESA = 'b0000_0010_0100_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_RESB = 'b0000_0010_0110_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_RESC = 'b0000_0010_1000_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_RESD = 'b0000_0010_1010_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_RESE = 'b0000_0010_1100_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_RESF = 'b0000_0010_1110_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_WR_MASK = 'b0000_0010_1110_0000_0000;\n    parameter reg[MODEREG_BITS:0] MR0_DEF_WR = MR0_WR12;\n\n    // MR1 Codes\n    parameter reg[MODEREG_BITS:0] MR1_RESERVED_BITS = 'b0011_1110_0000_0110_0000 | `MR1;\n\n    parameter reg[MODEREG_BITS:0] MR1_DLL_DIS  = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_DLL_ENB  = 'b0000_0000_0000_0000_0001 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_DLL_MASK = 'b0000_0000_0000_0000_0001 | `MR1;\n\n    parameter reg[MODEREG_BITS:0] MR1_ODI_34   = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ODI_48   = 'b0000_0000_0000_0000_0010 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ODI_40   = 'b0000_0000_0000_0000_0100 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ODI_RES3 = 'b0000_0000_0000_0000_0110 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ODI_MASK = 'b0000_0000_0000_0000_0110 | `MR1;\n\n    parameter reg[MODEREG_BITS:0] MR1_AL0     = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ALCLN1  = 'b0000_0000_0000_0000_1000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ALCLN2  = 'b0000_0000_0000_0001_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ALCLN3  = 'b0000_0000_0000_0001_1000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_ALRES   = 'b0000_0000_0000_0001_1000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_AL_MASK = 'b0000_0000_0000_0001_1000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_DEF_AL = MR1_AL0;\n\n    parameter reg[MODEREG_BITS:0] MR1_WL_DIS  = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_WL_ENB  = 'b0000_0000_0000_1000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_WL_MASK = 'b0000_0000_0000_1000_0000 | `MR1;\n\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_DIS   = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_60    = 'b0000_0000_0001_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_120   = 'b0000_0000_0010_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_40    = 'b0000_0000_0011_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_240   = 'b0000_0000_0100_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_48    = 'b0000_0000_0101_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_80    = 'b0000_0000_0110_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_34    = 'b0000_0000_0111_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_RTTN_MASK  = 'b0000_0000_0111_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_DEF_RTTN = MR1_RTTN_DIS;\n\n    parameter reg[MODEREG_BITS:0] MR1_TDQS_DIS  = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_TDQS_ENB  = 'b0000_0000_1000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_TDQS_MASK = 'b0000_0000_1000_0000_0000 | `MR1;\n\n    parameter reg[MODEREG_BITS:0] MR1_QOFF_ENB  = 'b0000_0000_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_QOFF_DIS  = 'b0000_0001_0000_0000_0000 | `MR1;\n    parameter reg[MODEREG_BITS:0] MR1_QOFF_MASK = 'b0000_0001_0000_0000_0000 | `MR1;\n\n    // MR2 Codes\n    parameter reg[MODEREG_BITS:0] MR2_RESERVED_BITS = 'b0011_1100_0000_0000_0000 | `MR2;\n\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BA0     = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BA1     = 'b0000_0000_0000_0000_0001 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BA2     = 'b0000_0000_0000_0000_0010 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BA3     = 'b0000_0000_0000_0000_0011 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BA_MASK = 'b0000_0000_0000_0000_0011 | `MR2;\n\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BG0     = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BG1     = 'b0000_0000_0000_0000_0100 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BG2     = 'b0000_0000_0001_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BG3     = 'b0000_0000_0001_0000_0100 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_BG_MASK = 'b0000_0000_0001_0000_0100 | `MR2;\n\n    parameter reg[MODEREG_BITS:0] MR2_CWL9     = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL10    = 'b0000_0000_0000_0000_1000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL11    = 'b0000_0000_0000_0001_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL12    = 'b0000_0000_0000_0001_1000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL14    = 'b0000_0000_0000_0010_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL16    = 'b0000_0000_0000_0010_1000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL18    = 'b0000_0000_0000_0011_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL20    = 'b0000_0000_0000_0011_1000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CWL_MASK = 'b0000_0000_0000_0011_1000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_DEF_CWL = MR2_CWL12;\n\n    parameter reg[MODEREG_BITS:0] MR2_LPASR_NORM = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_LPASR_RED  = 'b0000_0000_0000_0100_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_LPASR_EXT  = 'b0000_0000_0000_1000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_LPASR_AUTO = 'b0000_0000_0000_1100_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_LPASR_MASK = 'b0000_0000_0000_1100_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_LPASR_DEF  = MR2_LPASR_NORM;\n\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_DIS  = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_120  = 'b0000_0000_0010_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_240  = 'b0000_0000_0100_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_Z    = 'b0000_0000_0110_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_80   = 'b0000_0000_1000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_RES5 = 'b0000_0000_1010_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_RES6 = 'b0000_0000_1100_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_RES7 = 'b0000_0000_1110_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_RTTW_MASK = 'b0000_0000_1110_0000_0000 | `MR2;\n\n    parameter reg[MODEREG_BITS:0] MR2_CRC_WRITE_DATA_DIS  = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CRC_WRITE_DATA_ENB  = 'b0000_0001_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_CRC_WRITE_DATA_MASK = 'b0000_0001_0000_0000_0000 | `MR2;\n\n    parameter reg[MODEREG_BITS:0] MR2_TRR_DIS      = 'b0000_0000_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_ENB      = 'b0000_0010_0000_0000_0000 | `MR2;\n    parameter reg[MODEREG_BITS:0] MR2_TRR_ENB_MASK = 'b0000_0010_0000_0000_0000 | `MR2;\n\n    // MR3 Codes\n    parameter reg[MODEREG_BITS:0] MR3_RESERVED_BITS = 'b0011_1110_0000_0000_0000 | `MR3;\n\n    parameter reg[MODEREG_BITS:0] MR3_MPR_PATTERN   = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_PARITY    = 'b0000_0000_0000_0000_0001 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_MODEREG   = 'b0000_0000_0000_0000_0010 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_PAGE3     = 'b0000_0000_0000_0000_0011 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_PAGE_MASK = 'b0000_0000_0000_0000_0011 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DEF_MPR_PAGE = MR3_MPR_PATTERN;\n\n    parameter reg[MODEREG_BITS:0] MR3_MPR_DIS       = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_ENB       = 'b0000_0000_0000_0000_0100 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_ENB_MASK  = 'b0000_0000_0000_0000_0100 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DEF_MPR_ENB   = MR3_MPR_DIS;\n\n    parameter reg[MODEREG_BITS:0] MR3_GEARDOWN_HALF    = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_GEARDOWN_QUARTER = 'b0000_0000_0000_0000_1000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_GEARDOWN_MASK    = 'b0000_0000_0000_0000_1000 | `MR3;\n\n    parameter reg[MODEREG_BITS:0] MR3_PERDRAM_DIS  = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_PERDRAM_ENB  = 'b0000_0000_0000_0001_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_PERDRAM_MASK = 'b0000_0000_0000_0001_0000 | `MR3;\n\n    parameter reg[MODEREG_BITS:0] MR3_TEMP_DIS  = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_TEMP_ENB  = 'b0000_0000_0000_0010_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_TEMP_MASK = 'b0000_0000_0000_0010_0000 | `MR3;\n\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_NORM  = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_2X    = 'b0000_0000_0000_0100_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_4X    = 'b0000_0000_0000_1000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_RES3  = 'b0000_0000_0000_1100_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_RES4  = 'b0000_0000_0001_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_FLY2X = 'b0000_0000_0001_0100_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_FLY4X = 'b0000_0000_0001_1000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_RES7  = 'b0000_0000_0001_1100_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_REFMODE_MASK  = 'b0000_0000_0001_1100_0000 | `MR3;\n\n    parameter reg[MODEREG_BITS:0] MR3_DELAY_WRITE_4    = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DELAY_WRITE_5    = 'b0000_0000_0010_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DELAY_WRITE_6    = 'b0000_0000_0100_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DELAY_WRITE_RES3 = 'b0000_0000_0110_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DELAY_WRITE_MASK = 'b0000_0000_0110_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DEF_DELAY_WRITE = 'b0000_0000_0000_0000_0000 | `MR3;\n\n    parameter reg[MODEREG_BITS:0] MR3_MPR_SERIAL    = 'b0000_0000_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_PARALLEL  = 'b0000_0000_1000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_STAGGERED = 'b0000_0001_0000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_RES3      = 'b0000_0001_1000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_MPR_MODE_MASK = 'b0000_0001_1000_0000_0000 | `MR3;\n    parameter reg[MODEREG_BITS:0] MR3_DEF_MPR_MODE  = MR3_MPR_SERIAL;\n\n    // MR4 Codes\n    parameter reg[MODEREG_BITS:0] MR4_RESERVED_BITS = 'b0011_1100_0000_0000_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_MPS_DIS  = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_MPS_ENB  = 'b0000_0000_0000_0000_0010 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_MPS_MASK = 'b0000_0000_0000_0000_0010 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_TCRR_NORM = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_TCRR_EXT  = 'b0000_0000_0000_0000_0100 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_TCRR_MASK = 'b0000_0000_0000_0000_0100 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_TCRM_DIS  = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_TCRM_ENB  = 'b0000_0000_0000_0000_1000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_TCRM_MASK = 'b0000_0000_0000_0000_1000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_VREFMON_DIS  = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_VREFMON_ENB  = 'b0000_0000_0000_0001_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_VREFMON_MASK = 'b0000_0000_0000_0001_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_SPPR_DIS  = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_SPPR_ENB  = 'b0000_0000_0000_0010_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_SPPR_MASK = 'b0000_0000_0000_0010_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_CAL0     = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL3     = 'b0000_0000_0000_0100_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL4     = 'b0000_0000_0000_1000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL5     = 'b0000_0000_0000_1100_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL6     = 'b0000_0000_0001_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL8     = 'b0000_0000_0001_0100_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL_RES6 = 'b0000_0000_0001_1000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL_RES7 = 'b0000_0000_0001_1100_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_CAL_MASK = 'b0000_0000_0001_1100_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_DEF_CAL  = MR4_CAL0;\n    parameter int MR4_CAL_SHIFT = 6;\n    parameter int MR4_CAL_BITS = 3;\n\n    parameter reg[MODEREG_BITS:0] MR4_SREF_SLOW = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_SREF_FAST = 'b0000_0000_0010_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_SREF_MASK = 'b0000_0000_0010_0000_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_PRETRAIN_DIS  = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_PRETRAIN_ENB  = 'b0000_0000_0100_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_PRETRAIN_MASK = 'b0000_0000_0100_0000_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_RDPRE_1CLK = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_RDPRE_2CLK = 'b0000_0000_1000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_RDPRE_MASK = 'b0000_0000_1000_0000_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_WRPRE_1CLK = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_WRPRE_2CLK = 'b0000_0001_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_WRPRE_MASK = 'b0000_0001_0000_0000_0000 | `MR4;\n\n    parameter reg[MODEREG_BITS:0] MR4_PPR_DIS  = 'b0000_0000_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_PPR_ENB  = 'b0000_0010_0000_0000_0000 | `MR4;\n    parameter reg[MODEREG_BITS:0] MR4_PPR_MASK = 'b0000_0010_0000_0000_0000 | `MR4;\n\n    // MR5 Codes\n    parameter reg[MODEREG_BITS:0] MR5_RESERVED_BITS = 'b0011_1100_0000_0000_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_0    = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_4    = 'b0000_0000_0000_0000_0001 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_5    = 'b0000_0000_0000_0000_0010 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_6    = 'b0000_0000_0000_0000_0011 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_8    = 'b0000_0000_0000_0000_0100 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_RES5 = 'b0000_0000_0000_0000_0101 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_RES6 = 'b0000_0000_0000_0000_0110 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_RES7 = 'b0000_0000_0000_0000_0111 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_LATENCY_MASK = 'b0000_0000_0000_0000_0111 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_CRC_CLEAR = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_CRC_ERROR = 'b0000_0000_0000_0000_1000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_CRC_MASK  = 'b0000_0000_0000_0000_1000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_ERROR_CLEAR = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_ERROR_ERROR = 'b0000_0000_0000_0001_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_PARITY_ERROR_MASK  = 'b0000_0000_0000_0001_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_ODT_BUFFER_ENB  = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_ODT_BUFFER_DIS  = 'b0000_0000_0000_0010_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_ODT_BUFFER_MASK = 'b0000_0000_0000_0010_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_DIS   = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_60    = 'b0000_0000_0000_0100_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_120   = 'b0000_0000_0000_1000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_40    = 'b0000_0000_0000_1100_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_240   = 'b0000_0000_0001_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_48    = 'b0000_0000_0001_0100_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_80    = 'b0000_0000_0001_1000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_34    = 'b0000_0000_0001_1100_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_RTTP_MASK  = 'b0000_0000_0001_1100_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_DEF_RTTP = MR5_RTTP_DIS;\n\n    parameter reg[MODEREG_BITS:0] MR5_STICKY_PARITY_DIS  = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_STICKY_PARITY_ENB  = 'b0000_0000_0010_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_STICKY_PARITY_MASK = 'b0000_0000_0010_0000_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_DM_DIS  = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_DM_ENB  = 'b0000_0000_0100_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_DM_MASK = 'b0000_0000_0100_0000_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_WRITE_DBI_DIS  = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_WRITE_DBI_ENB  = 'b0000_0000_1000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_WRITE_DBI_MASK = 'b0000_0000_1000_0000_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_READ_DBI_DIS  = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_READ_DBI_ENB  = 'b0000_0001_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_READ_DBI_MASK = 'b0000_0001_0000_0000_0000 | `MR5;\n\n    parameter reg[MODEREG_BITS:0] MR5_DLL_FROZEN_DIS  = 'b0000_0000_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_DLL_FROZEN_ENB  = 'b0000_0010_0000_0000_0000 | `MR5;\n    parameter reg[MODEREG_BITS:0] MR5_DLL_FROZEN_MASK = 'b0000_0010_0000_0000_0000 | `MR5;\n\n    // MR6 Codes\n    parameter reg[MODEREG_BITS:0] MR6_RESERVED_BITS = 'b0011_1110_0000_0000_0000 | `MR6;\n\n    parameter reg[MODEREG_BITS:0] MR6_VREF_OFFSET_MASK = 'b0000_0000_0000_0011_1111 | `MR6;\n    parameter int MR6_VREF_OFFSET_SHIFT = 0;\n\n    parameter reg[MODEREG_BITS:0] MR6_VREF_RANGE_1    = 'b0000_0000_0000_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_VREF_RANGE_2    = 'b0000_0000_0000_0100_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_VREF_RANGE_MASK = 'b0000_0000_0000_0100_0000 | `MR6;\n\n    parameter reg[MODEREG_BITS:0] MR6_VREF_DIS    = 'b0000_0000_0000_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_VREF_ENB    = 'b0000_0000_0000_1000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_VREF_MASK   = 'b0000_0000_0000_1000_0000 | `MR6;\n\n\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_4    = 'b0000_0000_0000_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_5    = 'b0000_0000_0100_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_6    = 'b0000_0000_1000_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_7    = 'b0000_0000_1100_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_8    = 'b0000_0001_0000_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_RES5 = 'b0000_0001_0100_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_RES6 = 'b0000_0001_1000_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_RES7 = 'b0000_0001_1100_0000_0000 | `MR6;\n    parameter reg[MODEREG_BITS:0] MR6_tCCDL_MASK = 'b0000_0001_1100_0000_0000 | `MR6;\n\n    // MR7 Codes\n    parameter reg[MODEREG_BITS:0] MR7_RESERVED_BITS = 'b0011_1111_1111_1111_1111 | `MR7;\n\n    // Avoid name conflicts.\n    class Class_CRC;\n        bit _debug;\n        int _by_mode;\n        int _num_dms;\n\n        function new(int by_mode, bit debug = 0);\n            _by_mode = by_mode;\n            if (16 == _by_mode)\n                _num_dms = 2;\n            else\n                _num_dms = 1;\n`ifdef DEBUG_CRC\n            _debug = 1;\n`else\n            _debug = debug;\n`endif\n            if (_debug)\n                Verify();\n        endfunction\n        function void BuildFrame(input logic[MAX_DQ_BITS*MAX_BURST_LEN-1:0] dq_in,\n                                 input logic[MAX_DBI_BITS*MAX_BURST_LEN-1:0] dbi_in,\n                                 output logic[MAX_DQ_BITS*(MAX_BURST_LEN+MAX_CRC_TRANSFERS)-1:0] dq_out,\n                                 output logic[MAX_DBI_BITS*(MAX_BURST_LEN+MAX_CRC_EQUATION)-1:0] dbi_out);\n            logic[(MAX_DQ_BITS+MAX_DBI_BITS)*MAX_BURST_LEN-1:0] d;\n            logic[MAX_DQ_BITS-1:0] dq_crc;\n\n            dq_crc = Calculate(dq_in, dbi_in);\n            if (1'bx === &dq_crc)\n                dq_crc = 'x;\n            if (_debug)\n                $display(\"BuildFrame() CRCs %0h @%0t\", dq_crc, $time);\n            dbi_out = '1;\n            dbi_out[MAX_DBI_BITS*MAX_BURST_LEN-1:0] = dbi_in[MAX_DBI_BITS*MAX_BURST_LEN-1:0];\n            dq_out = AddCRC(dq_in, dq_crc);\n        endfunction\n        function logic[(MAX_DQ_BITS+MAX_DBI_BITS)*MAX_BURST_LEN-1:0] BitOrder(logic[MAX_DQ_BITS*MAX_BURST_LEN-1:0] dq_in,\n                                                                              logic[MAX_DBI_BITS*MAX_BURST_LEN-1:0] dbi_in);\n            logic[(MAX_DQ_BITS+MAX_DBI_BITS)*MAX_BURST_LEN-1:0] d;\n            int i;\n\n            i = 0;\n            d = '1;\n            // Place bits in expected data map order.\n            // All unused bits are 1 (check for dq/dm out of range for the given part width).\n            for (int dbi=0;dbi<MAX_DBI_BITS;dbi++) begin\n                for (int dq=0;dq<8;dq++) begin\n                    for (int transfer=0;transfer<8;transfer++) begin\n                        if ((dq < _by_mode) && (dbi < _num_dms))\n                            d[i] = dq_in[transfer*MAX_DQ_BITS + dq + dbi*8];\n                        i = i + 1;\n                    end\n                end\n                for (int transfer=0;transfer<8;transfer++) begin\n                    if (dbi < _num_dms)\n                        d[i] = dbi_in[transfer*MAX_DBI_BITS + dbi];\n                    i = i + 1;\n                end\n            end\n            if (_debug) begin\n                $display(\"CRCBitOrder - Input DQ:%0h DM:%0h @%0t\", dq_in, dbi_in, $time);\n                $display(\"CRCBitOrder - Output:(x16)%0h %0h @%0t\", (d >> 72) & 72'hffffffffffffffffff, d & 72'hffffffffffffffffff, $time);\n            end\n            return d;\n        endfunction\n        function logic[MAX_DQ_BITS*(MAX_BURST_LEN+MAX_CRC_TRANSFERS)-1:0] AddCRC(logic[MAX_DQ_BITS*MAX_BURST_LEN-1:0] dq_in,\n                                                                                 logic[MAX_DQ_BITS-1:0] crc_in);\n            logic[MAX_DQ_BITS*(MAX_BURST_LEN+MAX_CRC_TRANSFERS)-1:0] dq_out;\n\n            dq_out = '1;\n            dq_out[MAX_DQ_BITS*MAX_BURST_LEN-1:0] = dq_in[MAX_DQ_BITS*MAX_BURST_LEN-1:0];\n            for (int i=0;i<_by_mode;i++) begin\n                dq_out[MAX_BURST_LEN*MAX_DQ_BITS + i] = crc_in[i];\n            end\n            if (4 == _by_mode) begin\n                for (int i=4;i<8;i++) begin\n                    dq_out[(MAX_BURST_LEN+1)*MAX_DQ_BITS + i%4] = crc_in[i];\n                end\n            end\n            if (_debug) begin\n//                 $display(\"AddCRC Input :%36h @%0t\", dq_in, $time);\n//                 $display(\"AddCRC Output:%36h @%0t\", dq_out, $time);\n            end\n            return dq_out;\n        endfunction\n        function logic[MAX_DQ_BITS-1:0] GetCRC(logic[MAX_DQ_BITS*(MAX_BURST_LEN+MAX_CRC_TRANSFERS)-1:0] dq_in);\n            logic[MAX_DQ_BITS-1:0] crc;\n\n            for (int i=0;i<_by_mode;i++) begin\n                crc[i] = dq_in[(MAX_DQ_BITS*(MAX_BURST_LEN)) + i];\n            end\n            if (4 == _by_mode) begin\n                for (int i=4;i<8;i++) begin\n                    crc[i] = dq_in[(MAX_DQ_BITS*(MAX_BURST_LEN+1))+i%4];\n                end\n            end\n            return crc;\n        endfunction\n        function logic[MAX_DQ_BITS-1:0] Calculate(logic[MAX_DQ_BITS*MAX_BURST_LEN-1:0] dq_in,\n                                                logic[MAX_DBI_BITS*MAX_BURST_LEN-1:0] dbi_in);\n            logic[(MAX_DQ_BITS+MAX_DBI_BITS)*MAX_BURST_LEN-1:0] d;\n            logic[MAX_DQ_BITS-1:0] crc;\n\n            d = BitOrder(dq_in, dbi_in);\n            for (int i=0;i<MAX_DQ_BITS;i++) begin\n                crc[i] = CalculatePerEquation(i, d);\n            end\n            return crc;\n        endfunction\n        function logic CalculatePerEquation(int eq_number, logic[(MAX_DQ_BITS+MAX_DBI_BITS)*MAX_BURST_LEN-1:0] d);\n            int x16;\n            logic result;\n\n            x16 = 0;\n            if (eq_number > 7) begin\n                x16 = 72;\n                eq_number = eq_number % 8;\n            end\n            result = 0;\n            case (eq_number)\n                0: begin\n                    result = d[69+x16] ^ d[68+x16] ^ d[67+x16] ^ d[66+x16] ^ d[64+x16] ^ d[63+x16] ^ d[60+x16] ^\n                             d[56+x16] ^ d[54+x16] ^ d[53+x16] ^ d[52+x16] ^ d[50+x16] ^ d[49+x16] ^ d[48+x16] ^\n                             d[45+x16] ^ d[43+x16] ^ d[40+x16] ^ d[39+x16] ^ d[35+x16] ^ d[34+x16] ^ d[31+x16] ^\n                             d[30+x16] ^ d[28+x16] ^ d[23+x16] ^ d[21+x16] ^ d[19+x16] ^ d[18+x16] ^ d[16+x16] ^\n                             d[14+x16] ^ d[12+x16] ^ d[8+x16]  ^ d[7+x16]  ^ d[6+x16]  ^ d[0+x16];\n                end\n                1: begin\n                    result = d[70+x16] ^ d[66+x16] ^ d[65+x16] ^ d[63+x16] ^ d[61+x16] ^ d[60+x16] ^ d[57+x16] ^\n                             d[56+x16] ^ d[55+x16] ^ d[52+x16] ^ d[51+x16] ^ d[48+x16] ^ d[46+x16] ^ d[45+x16] ^\n                             d[44+x16] ^ d[43+x16] ^ d[41+x16] ^ d[39+x16] ^ d[36+x16] ^ d[34+x16] ^ d[32+x16] ^\n                             d[30+x16] ^ d[29+x16] ^ d[28+x16] ^ d[24+x16] ^ d[23+x16] ^ d[22+x16] ^ d[21+x16] ^\n                             d[20+x16] ^ d[18+x16] ^ d[17+x16] ^ d[16+x16] ^ d[15+x16] ^ d[14+x16] ^ d[13+x16] ^\n                             d[12+x16] ^ d[9+x16]  ^ d[6+x16]  ^ d[1+x16]  ^ d[0+x16];\n                end\n                2: begin\n                    result = d[71+x16] ^ d[69+x16] ^ d[68+x16] ^ d[63+x16] ^ d[62+x16] ^ d[61+x16] ^ d[60+x16] ^\n                             d[58+x16] ^ d[57+x16] ^ d[54+x16] ^ d[50+x16] ^ d[48+x16] ^ d[47+x16] ^ d[46+x16] ^\n                             d[44+x16] ^ d[43+x16] ^ d[42+x16] ^ d[39+x16] ^ d[37+x16] ^ d[34+x16] ^ d[33+x16] ^\n                             d[29+x16] ^ d[28+x16] ^ d[25+x16] ^ d[24+x16] ^ d[22+x16] ^ d[17+x16] ^ d[15+x16] ^\n                             d[13+x16] ^ d[12+x16] ^ d[10+x16] ^ d[8+x16]  ^ d[6+x16]  ^ d[2+x16]  ^ d[1+x16]  ^ d[0+x16];\n               end\n                3: begin\n                    result = d[70+x16] ^ d[69+x16] ^ d[64+x16] ^ d[63+x16] ^ d[62+x16] ^ d[61+x16] ^ d[59+x16] ^\n                             d[58+x16] ^ d[55+x16] ^ d[51+x16] ^ d[49+x16] ^ d[48+x16] ^ d[47+x16] ^ d[45+x16] ^\n                             d[44+x16] ^ d[43+x16] ^ d[40+x16] ^ d[38+x16] ^ d[35+x16] ^ d[34+x16] ^ d[30+x16] ^\n                             d[29+x16] ^ d[26+x16] ^ d[25+x16] ^ d[23+x16] ^ d[18+x16] ^ d[16+x16] ^ d[14+x16] ^\n                             d[13+x16] ^ d[11+x16] ^ d[9+x16]  ^ d[7+x16]  ^ d[3+x16]  ^ d[2+x16]  ^ d[1+x16];\n                end\n                4: begin\n                    result = d[71+x16] ^ d[70+x16] ^ d[65+x16] ^ d[64+x16] ^ d[63+x16] ^ d[62+x16] ^ d[60+x16] ^\n                             d[59+x16] ^ d[56+x16] ^ d[52+x16] ^ d[50+x16] ^ d[49+x16] ^ d[48+x16] ^ d[46+x16] ^\n                             d[45+x16] ^ d[44+x16] ^ d[41+x16] ^ d[39+x16] ^ d[36+x16] ^ d[35+x16] ^ d[31+x16] ^\n                             d[30+x16] ^ d[27+x16] ^ d[26+x16] ^ d[24+x16] ^ d[19+x16] ^ d[17+x16] ^ d[15+x16] ^\n                             d[14+x16] ^ d[12+x16] ^ d[10+x16] ^ d[8+x16]  ^ d[4+x16]  ^ d[3+x16]  ^ d[2+x16];\n                end\n                5: begin\n                    result = d[71+x16] ^ d[66+x16] ^ d[65+x16] ^ d[64+x16] ^ d[63+x16] ^ d[61+x16] ^ d[60+x16] ^\n                             d[57+x16] ^ d[53+x16] ^ d[51+x16] ^ d[50+x16] ^ d[49+x16] ^ d[47+x16] ^ d[46+x16] ^\n                             d[45+x16] ^ d[42+x16] ^ d[40+x16] ^ d[37+x16] ^ d[36+x16] ^ d[32+x16] ^ d[31+x16] ^\n                             d[28+x16] ^ d[27+x16] ^ d[25+x16] ^ d[20+x16] ^ d[18+x16] ^ d[16+x16] ^ d[15+x16] ^\n                             d[13+x16] ^ d[11+x16] ^ d[9+x16]  ^ d[5+x16]  ^ d[4+x16]  ^ d[3+x16];\n                end\n                6: begin\n                    result = d[67+x16] ^ d[66+x16] ^ d[65+x16] ^ d[64+x16] ^ d[62+x16] ^ d[61+x16] ^ d[58+x16] ^\n                             d[54+x16] ^ d[52+x16] ^ d[51+x16] ^ d[50+x16] ^ d[48+x16] ^ d[47+x16] ^ d[46+x16] ^\n                             d[43+x16] ^ d[41+x16] ^ d[38+x16] ^ d[37+x16] ^ d[33+x16] ^ d[32+x16] ^ d[29+x16] ^\n                             d[28+x16] ^ d[26+x16] ^ d[21+x16] ^ d[19+x16] ^ d[17+x16] ^ d[16+x16] ^ d[14+x16] ^\n                             d[12+x16] ^ d[10+x16] ^ d[6+x16]  ^ d[5+x16]  ^ d[4+x16];\n                end\n                7: begin\n                    result = d[68+x16] ^ d[67+x16] ^ d[66+x16] ^ d[65+x16] ^ d[63+x16] ^ d[62+x16] ^ d[59+x16] ^\n                             d[55+x16] ^ d[53+x16] ^ d[52+x16] ^ d[51+x16] ^ d[49+x16] ^ d[48+x16] ^ d[47+x16] ^\n                             d[44+x16] ^ d[42+x16] ^ d[39+x16] ^ d[38+x16] ^ d[34+x16] ^ d[33+x16] ^ d[30+x16] ^\n                             d[29+x16] ^ d[27+x16] ^ d[22+x16] ^ d[20+x16] ^ d[18+x16] ^ d[17+x16] ^ d[15+x16] ^\n                             d[13+x16] ^ d[11+x16] ^ d[7+x16]  ^ d[6+x16]  ^ d[5+x16];\n                end\n                default: begin\n                    $display(\"ERROR: Invalid CRC equation:%0d @%0t\", eq_number, $time);\n                end\n            endcase\n            return result;\n        endfunction\n        function void Verify();\n        endfunction\n    endclass\n\nendpackage\n\n`ifdef ASSERT_ON\n    `ifdef PROJ_ASSERTIONS\n    `endif\n`endif\n\n`endif\n\n","lang":"verilog"};
processSrcData(g_data);