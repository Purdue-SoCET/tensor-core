var g_data = {"name":"./include/signal_gen_if.vh","src":"`ifndef SIGNAL_GEN_IF_VH\n`define SIGNAL_GEN_IF_VH\n`include \"dram_pkg.vh\"\n`include \"signal_gen_if.vh\"\n\ninterface signal_gen_if ();\n    import dram_pkg::*;\n\n    //REFRESH request\n    logic ref_re;\n\n    //Signals interface between control unit and signal generator\n    dram_state_t state, nstate; \n    logic [RANK_BITS-1:0] RA0;\n    logic [BANK_GROUP_BITS-1:0] BG0;\n    logic [BANK_BITS-1:0] BA0;\n    logic [ROW_BITS-1:0] R0;\n    logic [COLUMN_BITS-1:0] C0;\n\n    //Interface between singal generator and DRAM\n    logic ACT_n;\n    logic RAS_n_A16;\n    logic CAS_n_A15;\n    logic WE_n_A14;\n    logic ALERT_n;\n    logic PARITY;\n    logic RESET_n;\n    logic TEN;\n    logic CS_n;\n    logic CKE;\n    logic ODT;\n    logic ZQ;\n    logic PWR;\n    logic VREF_CA;\n    logic VREF_DQ;\n\n    logic [RANK_BITS-1:0] C;\n    logic [BANK_GROUP_BITS-1:0] BG;\n    logic [BANK_BITS-1:0] BA;\n    logic [ADDR_BITS-1:0] ADDR;\n    logic ADDR_17;\n\n    \n    modport dut (\n        input ref_re,\n        input state, nstate, RA0, BG0, BA0, R0, C0,\n        output ACT_n, RAS_n_A16, CAS_n_A15, WE_n_A14, ALERT_n, PARITY, RESET_n, TEN, CS_n, CKE, ODT, C, BG, BA, ADDR, ADDR_17, PWR, VREF_CA, VREF_DQ, ZQ\n    );\n\n\n\nendinterface\n\n`endif","lang":"verilog"};
processSrcData(g_data);