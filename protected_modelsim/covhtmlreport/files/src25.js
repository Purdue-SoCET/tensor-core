var g_data = {"name":"./src/flex_counter.sv","src":"module flex_counter #( parameter N=5 ) (\n    input  logic  CLK, nRST,\n    input  logic  enable,\n    input  logic  [N-1:0] count_load,\n    input  logic  clear, //Add by Tri for pressing into 0\n    output logic  [N-1:0] count,\n    output logic  count_done\n);\n\nlogic [N-1:0] next_count;\nlogic prev_enable, en_rising_edge;\n\n// ENABLE RISING EDGE DETECT\nalways_ff @(posedge CLK, negedge nRST) begin\n    if (~nRST) begin\n        prev_enable <= 1'b0;\n    end\n    else begin\n        prev_enable <= enable;\n    end\nend\n\nalways_comb begin : ENABLE_EDGE_DET\n    en_rising_edge = enable && (~prev_enable);\nend\n\n// COUNTER LOGIC\nalways_ff @(posedge CLK, negedge nRST) begin\n    if (~nRST) begin\n        //count <= count_load;\n        count <= '0;\n    end\n    else if (clear) begin\n        count <= 0;\n    end\n    else begin\n        count <= next_count;\n    end    \nend\n\nalways_comb begin\n    if (en_rising_edge == 1'b1) begin\n        next_count = count_load - 1;        // -1 because 1 cycle taken to load the value\n    end\n\n    else begin\n        next_count = count - 1;\n        \n        if (count == '0) begin\n            next_count = '0;\n        end\n    end\nend\n\nassign count_done = (count == '0) ? 1'b1 : 1'b0;\n\nendmodule","lang":"verilog"};
processSrcData(g_data);