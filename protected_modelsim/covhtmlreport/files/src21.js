var g_data = {"name":"./src/init_state.sv","src":"`timescale 1ps/1ps\n\n`include \"init_state_if.vh\"\n`include \"socetlib_counter_if.vh\"\nmodule init_state (\n    input logic CLK, nRST,\n    init_state_if.dt it\n);\n\n    import dram_pkg::*;\n\n    logic [11:0] timing_count, timing_value, ntiming_vallue;\n    logic timing_clear, timing_cnt_en, timing_flag, n_timing_cnt_en;\n\n    //Latch init_done;\n    logic n_init_done;\n    dram_state_t state, n_state;\n    socetlib_counter #(.NBITS(12)) time_counter (\n        .CLK(CLK),\n        .nRST(nRST),\n        .clear(timing_clear),\n        .count_enable(timing_cnt_en),\n        .overflow_val(timing_value),\n        .count_out(timing_count),\n        .overflow_flag(timing_flag)\n    );\n\n    assign it.init_state = state;\n    assign it.ninit_state = n_state;\n    \n\n    always_ff @(posedge CLK, negedge nRST) begin: dram_state_t_logic\n        if (!nRST) begin\n            state <= POWER_UP;\n            timing_cnt_en <= 0;\n            it.init_done <= 0;\n        end else begin\n            state <= n_state;\n            timing_cnt_en <= n_timing_cnt_en;            \n            it.init_done <= n_init_done;\n        end\n    end\n\n    always_comb begin: INIT_DRAM_STATE\n        n_state = state;\n        timing_clear = 0;\n        n_timing_cnt_en = timing_cnt_en;\n        timing_value =  0;\n        n_init_done = it.init_done;\n        case(state)\n            POWER_UP: begin\n                timing_value = tPWUP;\n                if (it.init) begin\n                    n_timing_cnt_en = 1'b1;\n                end\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = PRE_RESET;\n                end\n            end\n\n            PRE_RESET: begin\n                timing_value = tPWUP;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = RESET;\n                end\n\n            end\n\n            RESET: begin\n                timing_value = tPWUP;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = NOP;\n                end\n\n            end\n\n            NOP: begin \n                timing_value = tPDc + tXPR;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_MODE_DLL;\n                end\n\n            end\n\n            LOAD_MODE_DLL: begin\n                timing_value = tDLLKc;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG0_REG3;\n                end\n\n            end\n        \n            LOAD_BG0_REG3: begin \n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG1_REG6;\n                end\n            end\n\n            LOAD_BG1_REG6: begin\n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG1_REG5;\n                end\n            end\n            LOAD_BG1_REG5: begin \n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG1_REG4;\n                end\n            end\n            LOAD_BG1_REG4: begin \n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG0_REG2;\n                end\n            end\n            LOAD_BG0_REG2: begin \n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG0_REG1;\n                end\n            end\n            LOAD_BG0_REG1: begin \n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = LOAD_BG0_REG0;\n                end\n            end\n            LOAD_BG0_REG0: begin \n                timing_value = tMOD;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_state = ZQ_CL;\n                end\n\n            end\n            ZQ_CL: begin \n               timing_value = tZQinitc;\n                if (timing_flag) begin\n                    timing_clear = 1;\n                    n_init_done = 1;\n                    // n_state = IDLE;\n                    n_timing_cnt_en = 1'b0;\n                end \n            end\n\n            //Start to working on between IDLE, ACTIVATE, WRITE, PRECHARGE, WRITE_COMMAND, READ_COMMAND\n            IDLE: begin\n                \n            end\n        endcase\n        \n    end\nendmodule","lang":"verilog"};
processSrcData(g_data);