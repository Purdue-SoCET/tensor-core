var g_data = {"name":"./include/control_unit_if.vh","src":"`ifndef CONTROL_UNIT_VH\n`define CONTROL_UNIT_VH\n`include \"dram_pkg.vh\"\n\n\ninterface control_unit_if();\n    import dram_pkg::*;\n\n    logic dWEN, dREN, ram_wait;\n    logic [31:0] ram_addr;\n    word_t ramload, ramstore;\n\n    dram_state_t state, nstate;\n\n    //Interface debug for the command FSM\n    logic init_done, init_req;\n    logic tACT_done, tWR_done, tRD_done;\n    logic tPRE_done, tREF_done, rf_req;\n\n    //Interface for connecting to the signal generator\n    logic [RANK_BITS - 1:0] rank;\n    logic [BANK_GROUP_BITS - 1:0] BG;\n    logic [BANK_BITS - 1:0] bank;\n    logic [ROW_BITS - 1:0] row;\n    logic [COLUMN_BITS + OFFSET_BITS - 1:0] col;\n    logic [OFFSET_BITS-1:0] offset;\n\n    //Interface for connect timing-control_unit-data_transfer\n    logic wr_en, rd_en, clear;\n\n    modport csm_debug (\n        input tACT_done, tWR_done, tRD_done,\n        input tPRE_done, tREF_done, rf_req\n    );\n\n    modport arb (\n        input dWEN, dREN, ram_addr,\n        output ram_wait, wr_en, rd_en, clear, offset\n    );\n\n    modport dram_sig (\n        output state, nstate, rank, BG, bank, row, col, rf_req\n    );\n    \n\nendinterface\n\n`endif","lang":"verilog"};
processSrcData(g_data);