var g_data = {"name":"./src/signal_gen.sv","src":"`timescale 1ns/1ps\n`include \"signal_gen_if.vh\"\n\nmodule signal_gen #(\n\n) (\n    input logic CLK,\n    input logic nRST,\n    signal_gen_if.dut mysig\n);\n    import dram_pkg::*;\n\n    logic nACT_n;\n    logic nRAS_n_A16;\n    logic nCAS_n_A15;\n    logic nWE_n_A14;\n    logic nALERT_n;\n    logic nPARITY;\n    logic nRESET_n;\n    logic nTEN;\n    logic nCS_n;\n    logic nCKE;\n    logic nODT;\n    logic nZQ;\n    logic nPWR;\n    logic nVREF_CA;\n    logic nVREF_DQ;\n    logic [RANK_BITS-1:0] nC;\n    logic [BANK_GROUP_BITS-1:0] nBG;\n    logic [BANK_BITS-1:0] nBA;\n\n    logic [ADDR_BITS-1:0] nADDR;\n    logic nADDR_17;\n\n    logic [4:0] cmd_addr;\n    logic issue;\n\n    assign issue = (mysig.state != mysig.nstate);\n\n\n    // always_ff @(posedge CLK, negedge nRST) begin\n    //     if (!nRST) begin\n    //         mysig.ACT_n          <= 0;\n    //         mysig.RAS_n_A16 <= 0;\n    //         mysig.CAS_n_A15 <= 0;\n    //         mysig.WE_n_A14 <= 0;\n    //         mysig.ALERT_n <= 0;\n    //         mysig.PARITY <= 0;\n    //         mysig.RESET_n <= 0;\n    //         mysig.TEN         <= 0;\n    //         mysig.CS_n <= 0;\n    //         mysig.CKE <= 0;\n    //         mysig.ODT <= 0;\n    //         mysig.ZQ <= 0;\n    //         mysig.PWR <= 0;\n    //         mysig.VREF_CA <= 0;\n    //         mysig.VREF_DQ <= 0;\n    //         mysig.ADDR <= 0;\n    //         mysig.ADDR_17 <= 0;\n    //         mysig.C <= 0;\n    //         mysig.BG <= 0;\n    //         mysig.BA <= 0;\n    //     end else begin\n    //         mysig.ACT_n <= nACT_n;\n    //         mysig.RAS_n_A16 <= nRAS_n_A16;\n    //         mysig.CAS_n_A15 <= nCAS_n_A15;\n    //         mysig.WE_n_A14 <= nWE_n_A14;\n    //         mysig.ALERT_n <= nALERT_n;\n    //         mysig.PARITY <= nPARITY;\n    //         mysig.RESET_n <= nRESET_n;\n    //         mysig.TEN <= nTEN;\n    //         mysig.CS_n <= nCS_n;\n    //         mysig.CKE <= nCKE;\n    //         mysig.ODT <= nODT;\n    //         mysig.ZQ <= nZQ;\n    //         mysig.PWR <= nPWR;\n    //         mysig.VREF_CA <= nVREF_CA;\n    //         mysig.VREF_DQ <= nVREF_DQ;\n    //         mysig.C <= nC;\n    //         mysig.BG <= mysig.BG;\n    //         mysig.BA <= mysig.BA;\n    //         mysig.ADDR <= mysig.ADDR;\n    //         mysig.ADDR_17 <= mysig.ADDR_17;\n    //     end\n    // end\n\n\n    always_comb begin : OUTPUT_VALUE\n        // Default values\n        cmd_addr   = DESEL_CMD;\n        mysig.ALERT_n   = 1'b1;\n        mysig.PARITY    = 1'b0;\n        mysig.RESET_n   = 1'b1;\n        mysig.TEN       = 1'b0;\n        mysig.ODT       = 1'b0;\n        mysig.C         = '0;\n        mysig.BG        = '0;\n        mysig.BA        = '0;\n        mysig.ADDR      = '0;\n        mysig.CKE       = 1'b1;\n        mysig.ADDR_17   = 1'b0;\n\n        mysig.ZQ        = 1'b0;\n        mysig.PWR       = 1'b1;\n        mysig.VREF_CA   = 1'b1;\n        mysig.VREF_DQ   = 1'b1;\n\n        // pass-through by default\n        // mysig.ACT_n     = mysig.ACT_n;\n        // mysig.RAS_n_A16 = mysig.RAS_n_A16;\n        // mysig.CAS_n_A15 = mysig.CAS_n_A15;\n        // mysig.WE_n_A14  = mysig.WE_n_A14;\n        // mysig.CS_n      = mysig.CS_n;\n\n    case (mysig.state)\n        POWER_UP: begin\n            cmd_addr = POWER_UP_PRG;\n            mysig.CKE     = 1'b0;\n            mysig.TEN     = 1'b0;\n            mysig.RESET_n = 1'b0;\n            mysig.PWR     = 1'b0;\n            mysig.VREF_CA = 1'b0;\n            mysig.VREF_DQ = 1'b0;\n        end\n\n        PRE_RESET: begin\n            cmd_addr = POWER_UP_PRG;\n            mysig.CKE     = 1'b0;\n            mysig.TEN     = 1'b0;\n            mysig.RESET_n = 1'b0;\n            mysig.PWR     = 1'b1;\n            mysig.VREF_CA = 1'b1;\n            mysig.VREF_DQ = 1'b1;\n        end\n\n        RESET: begin\n            cmd_addr = POWER_UP_PRG;\n            mysig.CKE     = 1'b0;\n            mysig.TEN     = 1'b0;\n            mysig.RESET_n = 1'b1;\n        end\n\n        NOP: begin\n            cmd_addr = DESEL_CMD;\n        end\n\n        LOAD_MODE_DLL: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h0;\n                mysig.BA      = 2'h1;\n                mysig.ADDR    = 14'h1;\n            end\n        end\n\n        LOAD_BG0_REG3: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h0;\n                mysig.BA      = 2'h3;\n                mysig.ADDR    = 14'h0;\n            end\n        end\n\n        LOAD_BG1_REG6: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h1;\n                mysig.BA      = 2'h2;\n                mysig.ADDR    = 14'h080F;\n            end\n        end\n\n        LOAD_BG1_REG5: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h1;\n                mysig.BA      = 2'h1;\n                mysig.ADDR     = 14'b0001000_0000000;\n            end\n        end\n\n        LOAD_BG1_REG4: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h1;\n                mysig.BA      = 2'h0;\n                mysig.ADDR    = 14'h1000;\n            end\n        end\n\n        LOAD_BG0_REG2: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h0;\n                mysig.BA      = 2'h2;\n                mysig.ADDR    = 14'h0088;\n            end\n        end\n\n        LOAD_BG0_REG1: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h0;\n                mysig.BA      = 2'h1;\n                mysig.ADDR    = 14'h0001;\n                //A[0] for DLL disable\n                // dr_ram.ADDR     = 14'h0001;\n            end\n        end\n\n        LOAD_BG0_REG0: begin\n            if (issue) begin\n                cmd_addr = LOAD_MODE_CMD;\n                mysig.BG      = 2'h0;\n                mysig.BA      = 2'h0;\n                mysig.ADDR    = 14'h041d;\n            end\n        end\n\n        ZQ_CL: begin\n            if (issue) begin\n                cmd_addr = ZQ_CMD;\n                mysig.ADDR    = 14'h0400;\n            end\n        end\n\n        ACTIVATE: begin\n            if (issue && !mysig.ref_re) begin\n                // cmd_addr = cmd_t'({2'b0, mysig.R0[16], mysig.R0[15], mysig.R0[14]});\n                cmd_addr = cmd_t'({2'b0, 1'b0, 1'b0, mysig.R0[14]});\n                mysig.BG      = mysig.BG0;\n                mysig.BA      = mysig.BA0;\n                mysig.ADDR    = mysig.R0[13:0];\n            end\n        end\n\n        WRITE: begin\n            if (issue && !mysig.ref_re) begin\n                cmd_addr   = WRITE_CMD;\n                mysig.BG        = mysig.BG0;\n                mysig.BA        = mysig.BA0;\n                mysig.RAS_n_A16 = 1'b1;\n                mysig.CAS_n_A15 = 1'b0;\n                mysig.WE_n_A14  = 1'b0;\n                mysig.ADDR      = {1'b0, 1'b1, 1'b0, 1'b0, mysig.C0};\n            end\n        end\n\n        READ: begin\n            if (issue && !mysig.ref_re) begin\n                cmd_addr   = READ_CMD;\n                mysig.BG        = mysig.BG0;\n                mysig.BA        = mysig.BA0;\n                mysig.ADDR      = {1'b0, 1'b1, 1'b0, 1'b0, mysig.C0};\n            end\n        end\n\n        PRECHARGE: begin\n            if (issue) begin\n                cmd_addr    = PRECHARGE_CMD;\n                mysig.BG         = mysig.BG0;\n                mysig.BA         = mysig.BA0;\n                mysig.ADDR[10]   = mysig.ref_re ? 1'b1 : 1'b0;\n            end\n        end\n\n        REFRESH: begin\n            if (issue) begin\n                cmd_addr = REFRESH_CMD;\n                mysig.BG =0;\n                mysig.BA = 0;\n            end\n        end\n\n        default: begin\n            cmd_addr = DESEL_CMD;\n        end\n    endcase\n\n    //Assign cmd into DRAM interface\n    {mysig.CS_n, mysig.ACT_n, mysig.RAS_n_A16, mysig.CAS_n_A15, mysig.WE_n_A14} = cmd_addr;\nend\n\nendmodule","lang":"verilog"};
processSrcData(g_data);